<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ash Furrow</title>
  <id>https://ashfurrow.com/blog</id>
  <link href="https://ashfurrow.com/"/>
  <link href="https://ashfurrow.com/feed.xml" rel="self"/>
  <updated>2016-09-27T16:28:32+00:00</updated>
  <author>
    <name>Ash Furrow</name>
  </author>
  <entry>
    <title>Resolving GitHub Merge Conflicts</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/resolving-github-merge-conflicts/"/>
    <id>https://ashfurrow.com/blog/resolving-github-merge-conflicts/</id>
    <published>2016-09-27T16:28:32+00:00</published>
    <updated>2016-09-27T16:28:32+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;So you&amp;rsquo;ve seen an opportunity to improve an open source project and you&amp;rsquo;ve submitted a pull request – awesome! Whether it&amp;rsquo;s a typo fix, added documentation, or maybe some code, pull requests from the open source community are what keep a project alive.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, in the time between when you make your pull request, and when it&amp;rsquo;s approved by the project maintainers, someone &lt;em&gt;else&amp;rsquo;s&lt;/em&gt; pull request gets merged, and &lt;em&gt;their&lt;/em&gt; changes conflict with yours. You might recognize this greyed out interface in GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/resolving-github-merge-conflicts/merge_ui.png" alt="GitHub merge interface" /&gt;&lt;/p&gt;

&lt;p&gt;If this happens, don&amp;rsquo;t worry. Let&amp;rsquo;s walk through the steps to pull down the updates from the other pull request, resolve the conflicts, and update your pull request so it can be merged.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m going to work from the command line, but you should be able to use these instructions for any git tool. I&amp;rsquo;m also going to assume that you&amp;rsquo;ve made your changes on a &lt;em&gt;fork&lt;/em&gt; of the project, basically a copy of the repository that you own.)&lt;/p&gt;

&lt;p&gt;The first thing we need to do is tell git where to find the changes. As a convention, we&amp;rsquo;re going to call the original repository the &lt;em&gt;upstream&lt;/em&gt;. This is the repository that your pull request is submitted on. To get the upstream git URL, go to the original GitHub repo page and click the &amp;ldquo;Clone or Download&amp;rdquo; button. &lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/resolving-github-merge-conflicts/url.png" alt="GitHub merge interface" /&gt;&lt;/p&gt;



&lt;p&gt;Copy that URL. Now we need to tell git where the upstream is, and then tell git to fetch information from the upstream.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add upstream https://github.com/Moya/Moya.git
git fetch upstream
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, great! Let&amp;rsquo;s make sure that we&amp;rsquo;re on the branch that you&amp;rsquo;ve made your changes on, the branch that you&amp;rsquo;re submitted the pull request from. I&amp;rsquo;m going to assume it&amp;rsquo;s called &lt;code&gt;my_pr_branch&lt;/code&gt;. It&amp;rsquo;s important that git is on this branch in order to resolve the conflicts from the upstream.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout my_pr_branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, now we need to pull in the changes from upstream into our pull request branch. We do this with the following command:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git pull upstream master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you&amp;rsquo;re probably going to have some conflicts. Let&amp;rsquo;s take a look at a conflict I had to resolve recently.&lt;/p&gt;


&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;HEAD&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;endpointByAddingParameterEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;encodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEncodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=======&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newParameterEncoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;encodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEncodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;b3dcbbc2a98d2b0c8ea04845681e04176fbd8f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The changes from my pull request are on the top, and the changes that have been made to the upstream repo are on the bottom. We need to reconcile the two, which can be tricky. Ideally, we would find out why the changes on the top were made so we can incorporate them into our branch, so go check the GitHub history for that file. This process of resolving merge conflicts gets easier with experience.&lt;/p&gt;

&lt;p&gt;Unit tests help a lot here, since they&amp;rsquo;ll let you know if you&amp;rsquo;ve made a mistake in the conflict resolution. If tests passed on your branch &lt;em&gt;before&lt;/em&gt; pulling from the upstream, and they passed on the upstream before being pulled into your branch, then they should also pass after merging the conflicts. If they don&amp;rsquo;t, there&amp;rsquo;s probably a mistake somewhere. If you can&amp;rsquo;t figure it out, don&amp;rsquo;t worry! Just push it to your pull request and ask for help.&lt;/p&gt;

&lt;p&gt;In my case, it ended up looking like this:&lt;/p&gt;


&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEndpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;newParameterEncoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;encodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;newEncodedRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameterEncoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlRequest&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;newEndpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;After resolving conflicts, you need to &lt;code&gt;git add .&lt;/code&gt; to add all the conflicting files and then &lt;code&gt;git commit&lt;/code&gt;. This will open up a text editor, probably vim, with a pre-filled commit message. &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Merge remote-tracking branch 'upstream/master' into my_pr_branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In vim, type &lt;code&gt;:wq&lt;/code&gt; and your commit is complete. Do a &lt;code&gt;git push&lt;/code&gt; to add the commit to your pull request, and wait for someone to review.&lt;/p&gt;

&lt;p&gt;Resolving conflicts gets easier with experience. Using git gets easier, too, but it still trips me up sometimes. If you get stuck at some point in this process, don&amp;rsquo;t worry. Do a Google search for your problem, and don&amp;rsquo;t give up. If you can&amp;rsquo;t figure it out, add a comment to the pull request asking for help. Make sure to &lt;a href="http://mattgemmell.com/what-have-you-tried/"&gt;list what you&amp;rsquo;ve tried&lt;/a&gt;. You&amp;rsquo;re trying to improve the project and so is the maintainer. We&amp;rsquo;ve all got the same goals: to improve the code and to improve the community, but make sure to have fun!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Darkroom Printing</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/darkroom-printing/"/>
    <id>https://ashfurrow.com/blog/darkroom-printing/</id>
    <published>2016-09-24T21:29:28+00:00</published>
    <updated>2016-09-24T21:29:28+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;A few weeks ago, I participated in &lt;a href="http://www.nycwlk.com"&gt;NYCWLK&lt;/a&gt;, a darkroom workshop and photo walk. I had been looking forward to this all summer – darkroom printing is arcane, requires equipment and chemicals, and a dark room. Having someone experienced there to show me the ropes in the &lt;a href="http://www.bushwickcommunitydarkroom.com"&gt;Bushwick Community Darkroom&lt;/a&gt; was the perfect way to try it out. &lt;a href="http://www.johnnypatience.com"&gt;Johnny Patience&lt;/a&gt; was great, and I learned a tonne.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the gist of how things work: when you take a film photo, a &lt;em&gt;negative&lt;/em&gt; is created on a piece of plastic. It&amp;rsquo;s called a negative because the dark parts of the photo are clear, and the brights parts of the photo are dark. When you want to create a photo from your negative, you basically shine a lamp from one side of the negative to project the image (enlarged) onto a piece of light-sensitive paper. This creates a negative image &lt;em&gt;of the negative&lt;/em&gt;. This recreates the original scene.&lt;/p&gt;

&lt;p&gt;What has fascinated me for so long about this process is &lt;em&gt;just how analogue it is&lt;/em&gt;. Film photography is obviously analogue, but there&amp;rsquo;s some science to it around metering light to get a proper exposure; you can only take the photo once, so you need to get it right. But in the darkroom, you cut test strips and try over and over with different exposure times and contrast levels until you see what you like. It&amp;rsquo;s all very subjective and you just sort of experiment until you get the results you want.&lt;/p&gt;

&lt;p&gt;(Again, this is &lt;a href="/blog/developers-should-learn-photography/"&gt;kind of like programming&lt;/a&gt; where you try something and see if it works. This repetition and experimentation is how humans acquire new skills, and both programming and film photography imbue this same learning philosophy.)&lt;/p&gt;

&lt;p&gt;Since the workshop, I&amp;rsquo;ve returned to the darkroom in Bushwick. My results are nowhere near great yet, but I&amp;rsquo;m really enjoying the process. I can&amp;rsquo;t say that printing in the darkroom gives me a better result than scanning and printing digitally – not yet anyway – but I definitely enjoy the process more. I feel a deeper sense of ownership over the final product, too. I&amp;rsquo;m looking forward to entering darkroom prints into next year&amp;rsquo;s Artsy Salon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Twitter Anger</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/twitter-anger/"/>
    <id>https://ashfurrow.com/blog/twitter-anger/</id>
    <published>2016-09-24T15:06:47+00:00</published>
    <updated>2016-09-24T15:06:47+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve struggled a a bunch with being angry on Twitter. I&amp;rsquo;ll feel angry and share that anger with the world, which isn&amp;rsquo;t something I want to do. I think it&amp;rsquo;s usually related to my depression. When I&amp;rsquo;m having trouble feeling my own emotions, it&amp;rsquo;s hard to relate to others and empathize with them, so I tweet things I normally wouldn&amp;rsquo;t. I always regret it later.&lt;/p&gt;

&lt;p&gt;The worst part is, Twitter rewards anger with followers, with favourites, and with retweets.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I made a tweet when I was angry that I now regret and it makes me sad that it got more RT / faves than most of my puns. :(&lt;/p&gt;&amp;mdash; Aaron Patterson (@tenderlove) &lt;a href="https://twitter.com/tenderlove/status/688179491529592833"&gt;January 16, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I said that I don&amp;rsquo;t want to share anger with the world, and that&amp;rsquo;s sort of accurate. There are things worth getting angry about, like the rise of fascism in America, and then there are other things, like the removal of the iPhone&amp;rsquo;s headphone jack. I&amp;rsquo;m okay sharing my anger about things that matter, and I&amp;rsquo;m okay with sharing frustration with things that matter less, but what I don&amp;rsquo;t want to share is &lt;em&gt;unproductive&lt;/em&gt; anger.&lt;/p&gt;

&lt;p&gt;This is why I feel being angry on Twitter, for me, is related to my depression. After a few years of talk therapy, I&amp;rsquo;ve come to characterize my depression by &lt;em&gt;unproductive sadness&lt;/em&gt;, and that absence of usefulness when I tweet angrily is what feels familiar, what feels like depression.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Seriously, fuck Dropbox. &lt;a href="https://t.co/F7BKhLX6M3"&gt;https://t.co/F7BKhLX6M3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/774225112203718656"&gt;September 9, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Even though &lt;a href="https://twitter.com/ashfurrow/status/774228247051657217"&gt;I regretted this tweet&lt;/a&gt;, I didn&amp;rsquo;t delete it because it felt like productive anger.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m not sure that being angry on Twitter is &lt;em&gt;bad&lt;/em&gt; per se, as much as it is unproductive (despite being often celebrated). Since &lt;a href="https://github.com/ashfurrow/blog/issues/189"&gt;beginning to think about this in January&lt;/a&gt;, I&amp;rsquo;ve been a lot less angry. In general, 2016 has been a great year for making progress in my depression. And apparently my anger, too.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CocoaPods' Lasting Impact</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/cocoapods-lasting-impact/"/>
    <id>https://ashfurrow.com/blog/cocoapods-lasting-impact/</id>
    <published>2016-09-23T01:08:19+00:00</published>
    <updated>2016-09-23T01:08:19+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/building-online-communities/"&gt;written before&lt;/a&gt; about how CocoaPods isn&amp;rsquo;t a dependency manager, but rather that CocoaPods &lt;em&gt;makes&lt;/em&gt; a dependency manager.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CocoaPods is a dependency manager only in the sense that Apple is a cell phone manufacturer – it’s just one of their many projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It raises the question: if CocoaPods isn&amp;rsquo;t a dependency manager, what &lt;em&gt;is&lt;/em&gt; it? And with an increasing variety of dependency managers for iOS, what will CocoaPods become?&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t speak to what CocoaPods is, but I believe that CocoaPods&amp;rsquo; lasting impact on the iOS developer community won&amp;rsquo;t be a tool, but rather an idea: that iOS developers can build their own developer tools and improve their own ecosystem.&lt;/p&gt;

&lt;p&gt;It can be hard to remember what iOS development was like before CocoaPods. I remember because &lt;em&gt;it sucked&lt;/em&gt; and as soon as a friend introduced me to CocoaPods, I was hooked. Your options were basically downloading zip files from GitHub, or using git submodules (still not convinced about which one is worse). CocoaPods was the first time I had seen someone other than Apple make my job as an iOS developer easier.&lt;/p&gt;

&lt;p&gt;CocoaPods was controversial – it still is, depending on who you ask – but the community has largely accepted the idea of non-Apple dependencies. CocoaPods won because it saved untold numbers of hours of tedious work. And now, I think in part &lt;em&gt;because&lt;/em&gt; CocoaPods was a success, we have lots of different third-party tools. We&amp;rsquo;ve got &lt;a href="https://revealapp.com"&gt;Reveal&lt;/a&gt; and &lt;a href="https://kapeli.com/dash"&gt;Dash&lt;/a&gt;, we&amp;rsquo;ve got &lt;a href="http://alcatraz.io"&gt;Xcode plugins&lt;/a&gt; and &lt;a href="https://github.com/Quick"&gt;Quick&amp;amp;Nimble&lt;/a&gt;, we&amp;rsquo;ve got the belief that &lt;a href="https://speakerdeck.com/jpsim/fixing-the-swift-tooling-problem"&gt;we can solve our own problems&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CocoaPods’ message is really that while the &lt;a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/"&gt;Cocoa Core Competencies&lt;/a&gt; are a necessary foundation, they aren’t sufficient to be a good iOS developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wrote this last year and I still think it&amp;rsquo;s true. But it&amp;rsquo;s not complete. I&amp;rsquo;m more and more convinced that being a good developer has less to do with what you know and more to do with your attitude. Good developers look both ways before crossing one-way streets, good developers don&amp;rsquo;t easily give up, and good developers look for ways to improve their workflows.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building Swift Playground Books</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/building-swift-playground-books/"/>
    <id>https://ashfurrow.com/blog/building-swift-playground-books/</id>
    <published>2016-08-27T16:57:02+00:00</published>
    <updated>2016-08-27T16:57:02+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;When I heard about Swift playground books during WWDC, I was &lt;em&gt;super&lt;/em&gt; excited about what kinds of new ways people could learn to code. And not just learn to code for the first time, but to learn a new framework or technique. &lt;/p&gt;

&lt;p&gt;I wanted in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I watched and re-watched &lt;a href="https://developer.apple.com/videos/play/wwdc2016/408/"&gt;the Swift playground video&lt;/a&gt; to wrap my head around the capabilities of playground books, from an author&amp;rsquo;s perspective, and a learner&amp;rsquo;s too. Playground books are not complex in theory: a nested folder structure with &lt;code&gt;Manifest.plist&lt;/code&gt; files with book metadata. But that structure needs to be precisely adhered to, or the book won&amp;rsquo;t work on the iPad.&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/building-swift-playground-books/structure.png" alt="Structure of playground book" /&gt;&lt;/p&gt;



&lt;p&gt;It&amp;rsquo;s easy to make a mistake when building these from hand, so a month ago or so I wrote a &amp;ldquo;linter&amp;rdquo; for playground books; it checks your folder structure and &lt;code&gt;Manifest.plist&lt;/code&gt; contents to made sure everything is correct. My idea was to build my playground book by hand and lint it to make sure I didn&amp;rsquo;t make any mistakes. &lt;/p&gt;

&lt;p&gt;But a few weeks ago, Orta suggested maybe creating a &lt;em&gt;generator&lt;/em&gt; for playground books. That&amp;rsquo;s&amp;hellip; a lot trickier than making a linter. But I &lt;a href="https://github.com/ashfurrow/playgroundbook/issues/14"&gt;opened an issue&lt;/a&gt; and kept the idea in the back of my head. &lt;/p&gt;

&lt;p&gt;Well this week &lt;a href="https://github.com/ashfurrow/playgroundbook/issues/15"&gt;I finished&lt;/a&gt; and &lt;a href="https://github.com/ashfurrow/playgroundbook"&gt;&lt;code&gt;playgroundbook&lt;/code&gt;&lt;/a&gt; is released. My idea was that authors should be able to write their books in regular playgrounds that can be opened in Xcode and edited on a Mac (playground books only work on iPad). The idea was simple, but the implementation was difficult.&lt;/p&gt;

&lt;p&gt;This really challenged me. There is no one-to-one mapping from playgrounds to playground &lt;em&gt;books&lt;/em&gt;; I had to prioritize which features to support and then figure out how to support them. The project has some &lt;a href="https://github.com/ashfurrow/playgroundbook#limitations-of-book-rendering"&gt;limitations&lt;/a&gt;. I&amp;rsquo;ll probably address some of them, but for now the project is good enough.&lt;/p&gt;

&lt;h2 id="how-to-get-started"&gt;How to get started?&lt;/h2&gt;

&lt;p&gt;Follow the &lt;a href="https://github.com/ashfurrow/playgroundbook#installation"&gt;installation instructions&lt;/a&gt; in the readme. Basically just run &lt;code&gt;gem install playgroundbook&lt;/code&gt;, with &lt;code&gt;sudo&lt;/code&gt; if necessary. &lt;/p&gt;

&lt;p&gt;The readme has instructions on how to use the tool, but here&amp;rsquo;s a more in-depth explanation. You need two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;book.yml&lt;/code&gt; file that specifies book metadata.&lt;/li&gt;
&lt;li&gt;A bunch of playgrounds that each represent a chapter of your book.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The metadata file looks like this:&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;UICollectionView Book&lt;/span&gt;
&lt;span class="na"&gt;identifier&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;com.ashfurrow.collectionview&lt;/span&gt;
&lt;span class="na"&gt;deployment_target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ios10.0&lt;/span&gt; &lt;span class="c1"&gt;# Optional&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resources&lt;/span&gt; &lt;span class="c1"&gt;# Optional&lt;/span&gt;
&lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Optional&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;UIKit&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PlaygroundSupport&lt;/span&gt;
&lt;span class="na"&gt;chapters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Chapter 1&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Chapter 2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;etc...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt; is the name of your book, &lt;code&gt;identifier&lt;/code&gt; is a unique identifier for it, and &lt;code&gt;deployment_target&lt;/code&gt; is the iOS version you&amp;rsquo;re targeting. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;resources&lt;/code&gt; is an optional directory to include images or other assets to be available to your book&amp;rsquo;s code. I haven&amp;rsquo;t used this feature extensively, so please open an issue if you run into any problems.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;imports&lt;/code&gt; is an array of frameworks to import in each page. Yes, each page needs its own &lt;code&gt;import&lt;/code&gt; statements. However, these are hidden from the learner. If you don&amp;rsquo;t specify any frameworks, only &lt;code&gt;UIKit&lt;/code&gt; is imported by default.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;chapters&lt;/code&gt; is an array of chapters. &lt;code&gt;Chapter 1&lt;/code&gt; requires a playground named &lt;code&gt;Chapter 1.playground&lt;/code&gt;. These aren&amp;rsquo;t just any playgrounds, they need to be specifically structured.&lt;/p&gt;

&lt;h2 id="how-does-it-work"&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s an example playground that can be built into a book. &lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;UIKit&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;PlaygroundSupport&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;sharedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//// First Page&lt;/span&gt;

&lt;span class="nf"&gt;sharedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;//// Second Page&lt;/span&gt;

&lt;span class="c1"&gt;// TODO: Write the second page.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code before the first quadruple slash comments is preamble that&amp;rsquo;s available to all your pages, which are delineated by those special comments. Code in the preamble can be accessed by pages but &lt;em&gt;only&lt;/em&gt; if it is marked &lt;code&gt;public&lt;/code&gt; (it&amp;rsquo;s a limitation of the playground books format). I know it doesn&amp;rsquo;t make sense to mark things as &lt;code&gt;public&lt;/code&gt; so you can access them in a playground, but I did warn you that there wasn&amp;rsquo;t a one-to-one mapping 😉&lt;/p&gt;

&lt;p&gt;Okay, so each page has a name that comes after the &lt;code&gt;////&lt;/code&gt; comment. &lt;/p&gt;

&lt;p&gt;You can also use special comments in playground books.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;//#-hidden-code&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This code gets executed but isn't visible in the book."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//#-end-hidden-code&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="cm"&gt;/*#-editable-code*/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;funcName&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="cm"&gt;/*#-end-editable-code*/&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The user will be prompted to edit &amp;lt;#funcName#&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This yields a compiler warning in Xcode ¯&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;_(ツ)_/¯"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These comments are in the video but not in the &lt;a href="https://developer.apple.com/library/prerelease/content/documentation/Xcode/Conceptual/swift_playgrounds_doc_format/index.html#//apple_ref/doc/uid/TP40017343-CH47-SW4"&gt;documentation&lt;/a&gt;. I don&amp;rsquo;t want to risk getting a letter from Apple Legal, so I&amp;rsquo;m not going to publish an extensive guide here.&lt;/p&gt;

&lt;p&gt;One more &lt;strong&gt;important thing&lt;/strong&gt;: code in the first page is accessible to the second page and every page after it &lt;strong&gt;only in Xcode&lt;/strong&gt;. These pages get split into several files and won&amp;rsquo;t be in the same scope. &lt;strong&gt;So this will not work&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;UIKit&lt;/span&gt;

&lt;span class="c1"&gt;//// First Page&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hi"&lt;/span&gt;

&lt;span class="c1"&gt;//// Second Page&lt;/span&gt;

&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt; &lt;span class="c1"&gt;// This only works in Xcode, it will break on the iPad ❗&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So watch out!&lt;/p&gt;

&lt;p&gt;(Like I said, it&amp;rsquo;s not an ideal solution but it is good enough.)&lt;/p&gt;

&lt;p&gt;To build a book from your playgrounds, run the following command terminal in the directory containing the &lt;code&gt;book.yml&lt;/code&gt; file and all the playgrounds:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;playgroundbook render book.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can AirDrop the playground book to your iPad and use it.&lt;/p&gt;

&lt;p&gt;Again, if you run into any problems, &lt;a href="https://github.com/ashfurrow/playgroundbook/issues/new"&gt;open an issue&lt;/a&gt;. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This was a lot of fun to build, done for the most part using TDD. It&amp;rsquo;s the latest in a &lt;a href="https://ashfurrow.com/blog/up-and-running-with-ruby/"&gt;series of Ruby projects&lt;/a&gt;. I&amp;rsquo;m getting really comfortable with Ruby, plus I just started React  at work. Being a beginner in so many different fields at once is intimidating, but I&amp;rsquo;m getting used it (even enjoying it a little). &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building Compassionate Software</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/building-compassionate-software/"/>
    <id>https://ashfurrow.com/blog/building-compassionate-software/</id>
    <published>2016-08-21T12:00:00+00:00</published>
    <updated>2016-08-21T12:00:00+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;If you make a mistake, you would want a colleague to point it out to you, right? Just like you would hope a colleague would ask a question when they don&amp;rsquo;t understand something, and just like you want everyone on your team to speak up with ideas, even if they&amp;rsquo;re unconventional. But chances are that you&amp;rsquo;ve been in the position to speak up before and haven&amp;rsquo;t. &lt;/p&gt;

&lt;p&gt;Why? It feels like those scenarios represent a good team dynamic, but what effect do they have on a team&amp;rsquo;s performance? And how can we begin to change a team&amp;rsquo;s dynamic to improve its performance?&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re going to take a look at &lt;em&gt;psychological safety&lt;/em&gt; and how it can help your team perform better. My goal is to give you the evidence you need to take back to your team so we can all improve our workplaces – with enough of us, we can begin to make significant change in our industry and beyond.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to take us through three main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Feelings Matter.&lt;/strong&gt; Before we talk about feelings, we should discuss why exactly they matter. There&amp;rsquo;s a lot of evidence here that I&amp;rsquo;m excited to talk about.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams with Psychological Safety Perform Better.&lt;/strong&gt; I&amp;rsquo;m going to describe what psychological safety means and what it looks like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Implement Psychological Safety on Your Team.&lt;/strong&gt; After we have a firm grasp on feelings and psychological safety, I want to discuss some ways to start improving your team&amp;rsquo;s performance and dynamics.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ve had this topic on my mind for a long time, and I&amp;rsquo;m really excited to get started. Let&amp;rsquo;s dive in! &lt;/p&gt;

&lt;h2 id="feelings-matter"&gt;Feelings Matter&lt;/h2&gt;

&lt;p&gt;So I&amp;rsquo;ve &lt;a href="https://ashfurrow.com/blog/empathetic-civilization/"&gt;written about this before&lt;/a&gt;, but I&amp;rsquo;ll say it again: &lt;em&gt;feelings matter&lt;/em&gt;. It might sound obvious to you – it might not – so it really does need to be repeated: feelings matter. Compassionate software can&amp;rsquo;t be built without compassion for each other.&lt;/p&gt;

&lt;p&gt;Feelings matter, a lot. &lt;a href="http://qz.com/622749/teens-do-better-in-science-when-they-know-einstein-and-curie-also-struggled/"&gt;We&amp;rsquo;ve actually researched this&lt;/a&gt;: students who learned about the struggles that scientists went through on their way to achieving success did a lot better in science class. And students who &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; learn started doing &lt;em&gt;worse&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Learning how successful scientists struggle helped students when they inevitably struggled. That&amp;rsquo;s because struggling is normal, but when we neglect to mention the struggles of history&amp;rsquo;s great scientists, we present the incorrect view that they just &lt;em&gt;were great&lt;/em&gt;. And that&amp;rsquo;s not true, &lt;a href="https://ashfurrow.com/blog/normalizing-struggle/"&gt;everyone struggles&lt;/a&gt; sometimes. Students no longer felt like outsiders when &lt;em&gt;they&lt;/em&gt; started to struggle.&lt;/p&gt;

&lt;p&gt;When students see themselves and their own struggles represented in the history of science, they learn to &lt;em&gt;empathize&lt;/em&gt; with scientists. Empathy, the core of emotions, is the practice of sharing another person&amp;rsquo;s point of view and feelings.&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/1Evwgu369Jw' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;Empathy is a choice we make. In 1996, &lt;a href="http://onlinelibrary.wiley.com/doi/10.1046/j.1365-2648.1996.12213.x/full"&gt;Theresa Wiseman&amp;rsquo;s work&lt;/a&gt; (&lt;a href="https://www.researchgate.net/profile/Theresa_Wiseman/publication/227941757_A_concept_analysis_of_empathy/links/00b4951e409deac34f000000.pdf"&gt;PDF&lt;/a&gt;) categorized four necessary components to empathy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeing the world as others see it.&lt;/li&gt;
&lt;li&gt;Recognizing and understanding another&amp;rsquo;s feelings.&lt;/li&gt;
&lt;li&gt;Staying non-judgemental.&lt;/li&gt;
&lt;li&gt;Communicating that you understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are things we can do, things we can &lt;em&gt;choose&lt;/em&gt; to do.&lt;/p&gt;

&lt;p&gt;This is how someone empathizes, which is core to feelings, which matter. Feelings are important. Now I want to explore what it means to be a member of a team where feelings are prioritized.&lt;/p&gt;

&lt;h2 id="teams-with-psychological-safety-perform-better"&gt;Teams with Psychological Safety Perform Better&lt;/h2&gt;

&lt;p&gt;So you want to be a 10x developer, eh? You may have heard that the 10x developer is a myth, but that&amp;rsquo;s not true: a 10x developer is someone who makes the ten developers around them each twice as productive.&lt;/p&gt;



&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;How to be a 10x engineer: help ten other engineers be twice as good.&lt;/p&gt;&amp;mdash; Peter Seibel (@peterseibel) &lt;a href="https://twitter.com/peterseibel/status/512615519934230528"&gt;September 18, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;



&lt;p&gt;You can be a 10x developer by making sure that your team has psychological safety.&lt;/p&gt;

&lt;p&gt;Psychological safety is defined as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The belief that one will not be punished or humiliated for speaking up with ideas, questions, concerns, or mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know this sounds touchy-feely, but there is data to back this up! Google spent &lt;em&gt;five years&lt;/em&gt; on &lt;a href="http://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html?_r=0"&gt;Project Aristotle&lt;/a&gt; searching for the answer to &lt;em&gt;what makes some teams perform really well and other teams perform poorly?&lt;/em&gt; They examined &lt;em&gt;a tonne&lt;/em&gt; of data and eventually – after extensive searching – they found psychological safety is correlated positively with team success.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There were other behaviors that seemed important as well — like making sure teams had clear goals and creating a culture of dependability. But Google’s data indicated that psychological safety, more than anything else, was critical to making a team work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is &lt;em&gt;Google&lt;/em&gt;. They A/B test shades of blue to use on the Gmail &amp;ldquo;Send&amp;rdquo; button. They are &lt;em&gt;the&lt;/em&gt; data-driven organization, and their research came to the conclusion that teams with psychological safety were more successful than teams without.&lt;/p&gt;

&lt;p&gt;Remember, psychological safety is the belief that you won&amp;rsquo;t be punished for saying something. That&amp;rsquo;s fairly basic, but think about it: I&amp;rsquo;m sure you&amp;rsquo;ve worked in groups where this wasn&amp;rsquo;t the case. Was that project a success, or a failure?&lt;/p&gt;

&lt;div class='embed-responsive embed-responsive-4by3'&gt;&lt;iframe src='//www.youtube.com/embed/LhoLuui9gX8' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Developers – &lt;em&gt;people&lt;/em&gt; – need to be able to ask questions when they don&amp;rsquo;t understand something. We need to feel free to suggest ideas or concerns, to be able to point out and admit mistakes. This is really necessary for development teams, and &lt;em&gt;especially&lt;/em&gt; necessary in resource-strained startups where missteps could cost the company.&lt;/p&gt;

&lt;p&gt;There was this one time at Artsy where I was behind schedule on a big feature, which was delaying me from starting work on &lt;a href="http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/"&gt;something really important&lt;/a&gt;. I sat down with my team, and we had &lt;em&gt;just&lt;/em&gt; started reviewing the designs for all the stuff I had to finish when a designer asked &amp;ldquo;what if&amp;hellip; we just&amp;hellip; don&amp;rsquo;t do any of it?&amp;rdquo; We hadn&amp;rsquo;t really considered whether the feature I was behind on was worth delaying the next project for. A designer from outside our team was comfortable challenging our assumptions. They were right, we dropped the delayed feature and moved directly on to what was more important.&lt;/p&gt;

&lt;p&gt;Because the designer felt comfortable asking questions, we came to a new conclusion we hadn&amp;rsquo;t considered on our own.&lt;/p&gt;

&lt;p&gt;Psychological safety is &lt;a href="http://qz.com/625870/after-years-of-intensive-analysis-google-discovers-the-key-to-good-teamwork-is-being-nice/"&gt;observable in teams&lt;/a&gt; in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Conversational turn-taking.&lt;/li&gt;
&lt;li&gt;Average emotional sensitivity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conversational turn-taking is a measure of how often people in a conversation switch from talking to listening. One member of a team who dominates the conversation is risking the psychological safety of the entire team. Everyone needs to feel safe having their say, and to revisit a conversation later if necessary.&lt;/p&gt;

&lt;p&gt;Average emotional sensitivity is a bit trickier. Emotional sensitivity is basically a measure of how empathetic some is to another&amp;rsquo;s feelings. For example, how often does one colleague notice another colleague is having a difficult time? And when they notice, do they try to understand? Do they stay non-judgemental? And do they communicate that understanding?&lt;/p&gt;

&lt;p&gt;Psychological safety really ought to be expected at your workplace. At any workplace, really, for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It makes team members feel safer: everyone is welcome.&lt;/li&gt;
&lt;li&gt;It makes business sense: teams with high levels of psychological safety consistently perform better than those without.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Everyone&lt;/em&gt; at your workplace should expect these things: from contributors and leadership, C-levels and the company board.&lt;/p&gt;

&lt;p&gt;Okay. So feelings matter, and psychological safety is why high-performing teams do so well. But how would one go about improving their team&amp;rsquo;s dynamic? Where do we start?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m glad you asked.&lt;/p&gt;

&lt;h2 id="how-to-implement-psychological-safety-on-your-team"&gt;How to Implement Psychological Safety on Your Team&lt;/h2&gt;

&lt;p&gt;Psychological safety is awesome! How do we &amp;ldquo;do psychological safety&amp;rdquo; though? That&amp;rsquo;s an interesting question. First we need to talk about the two scenarios you&amp;rsquo;re likely to find yourself in.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a team leader, there&amp;rsquo;s a lot you can do to improve your team&amp;rsquo;s dynamic and – as a consequence – your team&amp;rsquo;s performance. Let&amp;rsquo;s take a look at those steps after we discuss how individual contributors can help their teams, too.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re a team member, then you can still help improve the levels of psychological safety in your team using the same techniques as a team lead. However, you&amp;rsquo;re likely to have the biggest impact if you approach your team lead directly, present the evidence we&amp;rsquo;ve discussed, and work on the team dynamic together. This is really their job, they just might not know it yet.&lt;/p&gt;

&lt;p&gt;Leaders and contributors can do three main things to help improve psychological safety on their team:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Admit fallibility&lt;/strong&gt; and normalize struggle.&lt;/li&gt;
&lt;li&gt;Frame all work as &lt;strong&gt;learning experiences&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model curiosity&lt;/strong&gt; by creating a space where opinions are asked for and voices don&amp;rsquo;t need to ask permission.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, remember that everyone struggles and everyone makes mistakes. If you, as a team lead, make this the norm, then that sends a message to team members that it&amp;rsquo;s okay to make mistakes. Honestly, it&amp;rsquo;s pretty straightforward: you want your team to feel safe when things go wrong, so make sure to act normal when you make a mistake.&lt;/p&gt;

&lt;p&gt;Next, all work your team performs should be primarily modelled as exercises in learning. Because that&amp;rsquo;s what they are; when a team build something, you&amp;rsquo;re all really just &lt;em&gt;learning how to build something&lt;/em&gt; as a team. The byproduct of this is the thing that happened to built. &lt;/p&gt;

&lt;p&gt;The product a team builds is important to the business&amp;rsquo; success, so it may seem counterintuitive to place a higher priority on the learning experience of a team than on building the product itself. But remember: by doing this, you&amp;rsquo;re helping to increase the performance of your team so – in turn – they&amp;rsquo;re able to build a better product, faster and with fewer bugs. The evidence shows it makes business sense.&lt;/p&gt;

&lt;p&gt;Finally, you need to model curiosity. Ask questions, even silly ones. Ask questions you think you already know the answer to. Help model an environment where learning through curiosity is praised.&lt;/p&gt;

&lt;p&gt;This advice is really built upon empathy, which means there are a few other common sense tidbits that accompany it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watch out for people getting interrupted in meetings. When you see it, say &amp;ldquo;hang on, I want to hear the rest of what they have to say.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t pressure people into providing immediate feedback. Instead of asking on the spot, give time for reflective feedback. &amp;ldquo;I&amp;rsquo;ll type up what we&amp;rsquo;ve discussed and send it to everyone, let me know what isn&amp;rsquo;t clear.&amp;rdquo; &lt;/li&gt;
&lt;li&gt;Allow space for your team to revisit discussions if someone feels their voice wasn&amp;rsquo;t heard.&lt;/li&gt;
&lt;li&gt;We can practice empathy, we can set a Google Calendar reminder to reflect on recent meetings, we can focus on the feelings of our peers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Psychological safety can be a differentiator at your workplace. It&amp;rsquo;s hard to retain good developers, and it&amp;rsquo;s harder to find them in the first place. Working in a safe environment, where everyone feels like they can ask questions and where everyone is able to do their best work, well that sounds awesome, doesn&amp;rsquo;t it? Implement these suggestions so that your workplace stands out to prospective developers. &lt;/p&gt;

&lt;p&gt;This can be a workplace differentiator, likely more attractive than free snacks or a foosball table to prospective colleagues. Show your potential hires how you structure meetings, give them examples where you made a mistake but learned something, tell them a story about how someone asked a question and it had a big impact.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;We&amp;rsquo;ve covered a lot today, from some initial questions to empathy, and from definition of &amp;lsquo;psychological safety&amp;rsquo; to steps on improving it in your team. That&amp;rsquo;s a lot to take in, why not set a reminder somewhere to wait a week, think things over, and revisit this post.&lt;/p&gt;

&lt;p&gt;We have the evidence that shows how an ideal team works, but we see our industry falling short of that ideal. But! We have the tools to improve ourselves, our teams, and our industry. I really hope that teams operating in psychological safety become the norm, something to expect at any job. We&amp;rsquo;ve got a long way to go before we reach that point, but I know we can do it if we work together.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Like I said, I&amp;rsquo;ve had this topic on my mind for a long time, though I didn&amp;rsquo;t have the vocabulary to discuss it or the evidence to support my theories. A few months ago, I attended the &lt;a href="http://www.osfeels.com"&gt;Open Source &amp;amp; Feelings&lt;/a&gt; conference, and the talks there really helped frame a lot of my thoughts. I found the following talk particularly helpful, and led me to a lot of the points I discussed today.&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/OdHH5KWGTNo' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;I&amp;rsquo;m presenting on this topic at a &lt;a href="http://www.meetup.com/iOSoho/events/226405664/"&gt;meetup here in New York&lt;/a&gt; in October. I&amp;rsquo;d love to see you there, hear what you think, and talk about how we can all help improve the industry together.&lt;/p&gt;
</content>
  </entry>
</feed>
