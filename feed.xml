<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ash Furrow</title>
  <id>https://ashfurrow.com/blog</id>
  <link href="https://ashfurrow.com/"/>
  <link href="https://ashfurrow.com/feed.xml" rel="self"/>
  <updated>2017-10-08T16:04:31+00:00</updated>
  <author>
    <name>Ash Furrow</name>
  </author>
  <entry>
    <title>Due Diligence</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/due-diligence/"/>
    <id>https://ashfurrow.com/blog/due-diligence/</id>
    <published>2017-10-08T16:04:31+00:00</published>
    <updated>2017-10-08T16:04:31+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Okay so yesterday I wrote a &lt;a href="/blog/apple-releases-jive/"&gt;hypothetical blog post&lt;/a&gt; about a new testing framework that Apple made. I&amp;rsquo;ve got a lot of feedback – more than I expected, honestly. Developers really care about their tools.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;One piece of criticism I received is that I hadn&amp;rsquo;t filed any bug reports with Apple asking for these features. I did include a link to &lt;a href="http://bugreport.apple.com"&gt;Apple&amp;rsquo;s bug reporter&lt;/a&gt; and asked people to file radars, but I didn&amp;rsquo;t provide any radars to duplicate. That was an oversight on my part.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s some due diligence: I have filed eleven radars with Apple asking for individual features that would each enhance the developer experience. They have all been cross-posted to &lt;a href="http://www.openradar.me/"&gt;Open Radar&lt;/a&gt;, so please feel free to duplicate them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=4928269132496896"&gt;34875844 Xcode&amp;rsquo;s unit testing framework should include a mocking library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5060966442074112"&gt;34875826 Hot Module Reloading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=4970395111260160"&gt;34875798 Open source Xcode, or make a new OSS Xcode Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5011363730554880"&gt;34875762 Run unit tests in parallel processes/simulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5055377615880192"&gt;34875753 Xcode unit testing should support Behaviour-Driven Development workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=6135499479580672"&gt;34875723 Matchers that ship with Xcode&amp;rsquo;s testing framework could be improved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5025044409352192"&gt;34875713 Xcode should schedule failing tests to run first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=4959620246274048"&gt;34873674 Xcode should only run tests related to files changed since the last commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=6063405903380480"&gt;34873507 Add a test-on-save feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=4937505996537856"&gt;34873492 Unit tests always run in the same order, but should be randomized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.openradar.me/radar?id=5001137547640832"&gt;34876469 Isolate global state between tests by isolating tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are &lt;em&gt;all&lt;/em&gt; feature requests that I&amp;rsquo;m bringing from other communities – mainly Ruby and JavaScript. I&amp;rsquo;ve been &lt;a href="https://www.youtube.com/watch?v=LtrzZb5Jw0g"&gt;asking developers to bring ideas from other communities since Swift was in beta&lt;/a&gt;. It&amp;rsquo;s fair to ask me to follow my own advice.&lt;/p&gt;

&lt;p&gt;What features would make your day-to-day life as a developer easier, or more joyful?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Apple Releases Jive</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/apple-releases-jive/"/>
    <id>https://ashfurrow.com/blog/apple-releases-jive/</id>
    <published>2017-10-07T14:55:08+00:00</published>
    <updated>2017-10-07T14:55:08+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;The following is a hypothetical blog post, written by a version of me in a parallel universe. In this fictional world, Apple cares very much about software quality (ensured by unit testing), as well as the developer experience of building software for its platforms. The features I describe of Apple&amp;rsquo;s new fictional test runner are all real features in the &lt;a href="https://github.com/facebook/jest"&gt;Jest project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Wow, what a WWDC! Lots of stuff to get excited about, but what&amp;rsquo;s got me most pumped up is the release of Apple&amp;rsquo;s new unit testing tool: Jive. Let&amp;rsquo;s dive into what Jive is, how it makes your life as an iOS developer easier, and how it helps you write better software.&lt;/p&gt;

&lt;p&gt;First some theory. Unit testing generally has three components: a test runner, which runs your tests; a test framework, which is how you structure your tests; and a matcher library, which helps you write test assertions. Jive provides the whole package: it&amp;rsquo;s a test runner, a test framework, and a matcher library. Let&amp;rsquo;s go through each component in detail.&lt;/p&gt;

&lt;h2 id="test-runner"&gt;Test Runner&lt;/h2&gt;

&lt;p&gt;Jive&amp;rsquo;s test runner is seriously impressive. Apple has examined the workflow that developers – inside Apple and within the community – and has optimized Jive for common workflows. The top priority of Jive is to give accurate test results as quickly as possible.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s say you check out a new branch to work on a feature. Jive is going to use git to determine which Swift files and which tests have changed since the last commit. Running fewer tests will speed up the test suite run time. And whenever you save a file, Jive examines the dependency graph and re-runs all related tests, giving you near instant feedback in your red/green/refactor cycle.&lt;/p&gt;

&lt;p&gt;Jive prioritizes running tests that failed the last time it ran because it assumes that you&amp;rsquo;re trying to fix those tests first. It also keeps track of how long each test takes to run, in order to prioritize long-running tests &lt;em&gt;first&lt;/em&gt;. This reduces overall test time. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/apple-releases-jive/length.png" alt="Before and after running long tests first" /&gt;&lt;/p&gt;

&lt;p&gt;Apparently, the improved scheduling of long-running tests improved full test suite run times by 20% – wow! And because it can run tests in parallel simulator processes (from Xcode 9), parallelism is constrained only by the number of cores in your CPU.&lt;/p&gt;

&lt;p&gt;Overall, Jive provides a fast testing experience, using advanced dependency resolution techniques and aggressive caching so that incremental changes take less than a second to test. This near-instant feedback is a &lt;em&gt;huge&lt;/em&gt; change in how we can write code. Since tests take a very short time to run, developers run them more often (on file saves, in a pre-commit hook, etc). &lt;/p&gt;

&lt;p&gt;On full test runs, Jive is still stunningly fast, reducing test suite run times with XCTest to about 15% of their original run times. Very impressive!&lt;/p&gt;

&lt;h2 id="test-framework"&gt;Test Framework&lt;/h2&gt;

&lt;p&gt;XCTest provided a very bare-bones approach to testing, something reminiscent of JUnit circa 1999. In contrast, Jive provides a modern RSpec-like interface for behaviour-driven development. Let&amp;rsquo;s compare.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;MyTests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;XCTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;testExample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay now let see an equivalent Jive test suite.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="n"&gt;beforeEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;afterEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"behaves a certain way"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What may not be obvious about RSpec-style tests is the possibility of &lt;em&gt;nesting contexts&lt;/em&gt;. Let&amp;rsquo;s take a look at a more practical example to see the power of nesting test contexts.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;DataBase&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="n"&gt;beforeEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DataBase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;testDataBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;afterEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adds new rows to the db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"prepopulated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;beforeEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;populateWithFakeData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"can fetch rows from the db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This kind of nested contexts was impossible to build in XCTest (at least, without a lot of work and/or repeated code). Finally Apple has recognized that a test suite needs more than just two &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Jive leverages its new runner with the RSpec-style tests to run each test in an independent process. This means that state leftover from one test can&amp;rsquo;t affect the outcome of another test. Nice!&lt;/p&gt;

&lt;p&gt;Overall, Jest provides an interface for testing that lends itself to writing more expressive tests. It reminds me of &lt;a href="https://github.com/Quick/Quick"&gt;Quick&lt;/a&gt;, the Swift test framework that&amp;rsquo;s now been sherlocked by Jive.&lt;/p&gt;

&lt;h2 id="matchers"&gt;Matchers&lt;/h2&gt;

&lt;p&gt;XCTest matchers were&amp;hellip; not optimal. Matchers are used by the assertions of a test, so making them concise and expressive is really important.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;XCTAssertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s compare with the new Jive matchers.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;objectB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jive uses operator overloading to help write more expressive tests. I really dig this – it lets developers choose whatever level of verbosity they feel is right for their project.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at a few more examples.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beNil&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can write your own matchers, too, and leverage the power of the Swift type system. For example, it&amp;rsquo;d be pretty easy to write a custom matcher to check that collections are of a certain size. I&amp;rsquo;ll likely port my &lt;a href="https://github.com/ashfurrow/Nimble-Snapshots"&gt;Nimble-Snapshots&lt;/a&gt; library over to Jive within the next few weeks.&lt;/p&gt;

&lt;p&gt;And of course Jive ships with a comprehensive mocking library. This makes mocking dependencies and injecting them into a subject under test &lt;em&gt;really&lt;/em&gt; easy. &lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"invokes the callback"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Jive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;testSubject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;haveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"calls the network"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Jive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Alamofire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;testSubject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;networkModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;

    &lt;span class="n"&gt;testSubject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;haveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Very cool, and all out of the box! Mocking is a testing strategy that Objective-C and Swift developers aren&amp;rsquo;t too familiar with, but it &lt;a href="https://stackoverflow.com/a/3623574/516359"&gt;solves a lot of problems&lt;/a&gt;. I&amp;rsquo;m looking forward to this powerful testing technique become more popular within our community.&lt;/p&gt;

&lt;h2 id="wrap-up"&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Apple has released Jive as an open source Xcode extension, written in Swift. This means that any Swift developer can contribute back to the project, helping to improve everyone&amp;rsquo;s developer experience. After releasing the &lt;a href="https://swift.org/blog/swift-local-refactoring/"&gt;Swift refactoring tools&lt;/a&gt; as open source last year, it&amp;rsquo;s exciting to see Apple continue this trend.&lt;/p&gt;

&lt;p&gt;Finally, Xcode ships with everything an iOS developer needs to write comprehensive unit tests. Apple really put a concerted effort into making Jive an industry-leading test runner, and I thank them for recognizing how important unit testing is to making quality software.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Of course, Jive doesn&amp;rsquo;t exist. It&amp;rsquo;s up to iOS developers to seek out better testing tools than the ones we&amp;rsquo;re given by Apple, and most folks don&amp;rsquo;t bother. And because Xcode is &lt;a href="http://isxcodeopensourceyet.github.io"&gt;closed source&lt;/a&gt;, the community can&amp;rsquo;t contribute back to improve their own tools.&lt;/p&gt;

&lt;p&gt;So why haven&amp;rsquo;t Apple done this? Priorities. Apple has the engineering talent to make this a reality, but they have other priorities.&lt;/p&gt;

&lt;p&gt;Not to suggest that making Jive would be easy. Imagine: you hit &amp;ldquo;save&amp;rdquo; and Xcode has to determine which files have changed, recompile them, load them into a runtime, and execute them. That alone would take a lot of engineering effort, and only a few companies exist that could invest the time. And only Apple can contribute to Xcode.&lt;/p&gt;

&lt;p&gt;Until Apple cares more about writing modern unit tests, or until they get tired of us &lt;a href="/blog/due-diligence/"&gt;filing radars&lt;/a&gt; asking for better tools, we&amp;rsquo;ll likely never see Jive come to be.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Weekend Hack Project: Twelease</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/node-express-typescript/"/>
    <id>https://ashfurrow.com/blog/node-express-typescript/</id>
    <published>2017-10-01T19:28:28+00:00</published>
    <updated>2017-10-01T19:28:28+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been using technologies like &lt;a href="http://nodejs.org"&gt;Node.js&lt;/a&gt;, &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt;, and &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; at Artsy for a while now, contributing new features or fixing bugs to various codebases. But I haven&amp;rsquo;t ever gone through the full process of having an idea, starting a new project, building a minimum-deployable-product, and shipping it off to a server. I was less prepared for this than I&amp;rsquo;d thought.&lt;/p&gt;

&lt;p&gt;While I give an overview of steps I followed, this isn&amp;rsquo;t a tutorial. It is a reflection on the contrasts between the iOS developer experience and the JavaScript developer experience. All the code is &lt;a href="https://github.com/ashfurrow/twelease"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I like using small projects to learn new things. Limited-scope projects are great to build without getting too overwhelmed by complexity. An open source project &lt;a href="https://github.com/danger/danger-js/issues/332"&gt;wanted to tweet when they pushed a new GitHub tag&lt;/a&gt;; only slightly more complicated than an IFTTT rule, perfect.&lt;/p&gt;

&lt;p&gt;But where to start?&lt;/p&gt;

&lt;p&gt;See, after opening Xcode and selecting a project template, you have an entire app. You can compile and run it as-is and there&amp;rsquo;s tonnes of helpful comments about where to add certain pieces of code.&lt;/p&gt;

&lt;p&gt;There is no Xcode for JavaScript, so how you decide to build your app is &lt;em&gt;entirely&lt;/em&gt; up to you. It can be difficult to choose a methodology because there is an entire community of strong opinions about how to build software. And while projects like &lt;a href="https://github.com/react-community/create-react-native-app"&gt;Create React Native App&lt;/a&gt; offer an equivalent experience of a new project template, what I&amp;rsquo;ve learned is that the frameworks you use in JavaScript are only the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m using Express, but I prefer using a strong type system. No problem, I&amp;rsquo;ll use TypeScript! Okay, so now I have to integrate an entire build system into my workflows for developing, testing, and deploying, and holy shit I&amp;rsquo;m exhausted already.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve used Express before, but I copy/pasted a basic Hello, World project anyway. Then I found &lt;a href="https://github.com/Gisonrg/express-github-webhook"&gt;a library&lt;/a&gt; that provides middleware to process and verify GitHub webhook events. Great! Let&amp;rsquo;s smash the two together, LHC-style.&lt;/p&gt;

&lt;p&gt;As I work, I&amp;rsquo;m getting tired of building, then running, my code. So I add &lt;a href="https://gulpjs.com"&gt;Gulp&lt;/a&gt; to watch the filesystem and re-run the TypeScript compiler whenever I change &lt;code&gt;.ts&lt;/code&gt; files. I also specify an output directory of &lt;code&gt;dist&lt;/code&gt; because that seems to be what everyone else does. (&lt;code&gt;dist&lt;/code&gt; isn&amp;rsquo;t checked in to git, it&amp;rsquo;s basically like your Xcode app archives.) &lt;/p&gt;

&lt;p&gt;Gulp is configured via execution of &lt;a href="https://github.com/ashfurrow/twelease/blob/master/gulpfile.js"&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/a&gt; - like a Gemfile or Podfile, while TypeScript is configured through &lt;a href="https://github.com/ashfurrow/twelease/blob/master/tsconfig.json"&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt;. Quirky difference – but it makes sense. It&amp;rsquo;s amazing how flexible all the tools are – you can configure tools on the command line, through config files, or through environment variables. The easiest is through the config files, but they all need to be strictly valid JSON. The strictness of JSON was a bit frustrating, to be honest, especially the lack of comments.&lt;/p&gt;

&lt;p&gt;I also needed to get fancy about how Heroku gets deployed by adding &lt;code&gt;[&amp;quot;types&amp;quot;: [&amp;quot;node&amp;quot;]]&lt;/code&gt; to my TypeScript config. Oh, and also a &lt;a href="https://github.com/ashfurrow/twelease/blob/1f233ba4aa8004958379e073232cc9b72b395c47/package.json#L41"&gt;&lt;code&gt;postinstall&lt;/code&gt; script&lt;/a&gt;. Otherwise, the TypeScript compilation would fail on Heroku. And I wanted to compile the TypeScript &lt;em&gt;on deploy&lt;/em&gt; and not as part of the server startup. Oh, and I made sure Heroku&amp;rsquo;s &lt;code&gt;Procfile&lt;/code&gt; points to the &lt;code&gt;dist&lt;/code&gt; directory&amp;rsquo;s &lt;code&gt;index.js&lt;/code&gt; (which is the compiled version of &lt;code&gt;src/index.ts&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So.&lt;/p&gt;

&lt;p&gt;Depending on your background, these details might seem either so trivial as to be hardly worth mentioning, or so complex that you might feel overwhelmed. And with no community authority like Apple providing a clear path for beginners, it&amp;rsquo;s very easy to get stuck on random configuration problems.&lt;/p&gt;

&lt;p&gt;That said, I also happen to disagree with a lot of Apple&amp;rsquo;s vision for how to develop software. Not just methodology, like MVC, but also build tools. For instance, Apple&amp;rsquo;s &lt;a href="http://isxcodeopensourceyet.github.io"&gt;Xcode IDE is closed source&lt;/a&gt;, and has very minimal support for extensions. Many community projects, like &lt;a href="https://github.com/realm/SwiftLint"&gt;swiftlint&lt;/a&gt; and &lt;a href="https://github.com/jpsim/SourceKitten"&gt;sourcekitten&lt;/a&gt;, do help improve the iOS development experience, but iOS developers tend to rely exclusively on Apple tooling.&lt;/p&gt;

&lt;p&gt;In contrast, the JS tooling ecosystem is alive with a variety of linters, type-checkers, formatters, file watchers, test runners, and more. Yes, it is a little overwhelming, and yes, your initial project setup is a lot harder than a new project template from Xcode, but the JS community seems to believe that a little extra upfront work is well worth improving the development experience long term. Having worked in both the iOS and JS ecosystems, I&amp;rsquo;m inclined to agree with them.&lt;/p&gt;

&lt;p&gt;More than just a variety of tools is the size of the community that builds them. Because JavaScript developers mainly use tools written &lt;em&gt;in JavaScript&lt;/em&gt;, the initial barrier of contributing to those tools is enormously lowered. The community empowers its members to improve the shared tooling, and the results are spectacular.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Let’s flip the tables: how empowering would it feel if your app’s API was written in Swift? You’d be able to fix your own bugs, add features&lt;/p&gt;&amp;mdash; Pablo Picasghost👻 (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/914247587984687104?ref_src=twsrc%5Etfw"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The cycle of compiling Swift/Objective-C to run unit tests adds a lot of time to my iOS development process. It takes time to compile, install, and run tests. If you have to wait fifteen seconds to see if your code works, you won&amp;rsquo;t check as often. In contrast, &lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt; and &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; make testing &lt;em&gt;unbelievably fast&lt;/em&gt;. Using Jest to test fundamentally changed how I write code, and I miss the near-instant feedback cycle when I return to iOS native development.&lt;/p&gt;

&lt;p&gt;The JavaScript community moves at a blistering pace. That means I can&amp;rsquo;t just learn the current JS syntax because most tutorials, StackOverflow answers, and blog posts use older syntaxes that I also need to learn. For example, dependencies used to be loaded into a file with &lt;code&gt;require()&lt;/code&gt; but now most folks seem to use &lt;code&gt;import&lt;/code&gt;. But &lt;code&gt;import&lt;/code&gt; won&amp;rsquo;t work for me in the Node REPL, I had to still use &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Something I really dig about JavaScript is how you import all your dependencies explicitly; you import specifically &amp;ldquo;exported&amp;rdquo; functions and such from modules. Some modules export named functions, while other modules export a &amp;ldquo;default&amp;rdquo; function. Some do both. Here are a few examples of how to import stuff in JS:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./lib/loggers'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'auth'&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./twitter'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It all makes sense to read, but I still don&amp;rsquo;t have the mechanics internalized enough to write the syntax right on the first try.&lt;/p&gt;

&lt;p&gt;One neat thing I like about working in Artsy&amp;rsquo;s JS codebases is their use of git pre-commit hooks. Often, these hooks will lint and reformat your code for you to adhere to the repo&amp;rsquo;s standard. Or maybe they&amp;rsquo;ll run any tests related to your staged changes. Very handy stuff for catching mistakes earlier in the development process. For whatever reason, automatic code formatters just haven&amp;rsquo;t been popular among iOS developers.&lt;/p&gt;

&lt;p&gt;Okay, so I have my app set up and working, but with all the experimentation with tools and frameworks, I&amp;rsquo;m certain that I&amp;rsquo;ve left in some orphaned configuration or dependencies that I no longer need. Or maybe I have some developer dependencies in my &lt;a href="https://github.com/ashfurrow/twelease/blob/master/package.json"&gt;&lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt;. Or some leftover &lt;code&gt;scripts&lt;/code&gt;. It&amp;rsquo;s pretty easy to accumulate all this stuff. Maybe I&amp;rsquo;ll go shake it out. If you see anything funky &lt;a href="https://github.com/ashfurrow/twelease"&gt;in the repo&lt;/a&gt;, let me know in an issue.&lt;/p&gt;

&lt;p&gt;I still have a few mysteries I&amp;rsquo;m looking to solve, like precisely how &lt;code&gt;es-lint&lt;/code&gt;, &lt;code&gt;ts-lint&lt;/code&gt;, and &lt;code&gt;prettier&lt;/code&gt; relate to one another. Stuff like that, quirks I&amp;rsquo;ve noticed or other common knowledge that people don&amp;rsquo;t tend to write blog posts about. I&amp;rsquo;ve still got a lot to learn.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The JavaScript and iOS developer communities are very different places. iOS developers have Apple setting the vision for how to build apps, whereas JS developers have an &lt;em&gt;overwhelming&lt;/em&gt; number of options. I&amp;rsquo;m glad I can work in both communities – I like and dislike things about each.&lt;/p&gt;

&lt;p&gt;The initial setup of the project, toolchain, and workflows was difficult enough to frustrate me a few times. It will be a lot easier next time. But the improved development workflow makes writing software way easier, way faster, and way more fun.&lt;/p&gt;

&lt;p&gt;If any of this has resonated with you, Mozilla has some &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs"&gt;comprehensive documentation&lt;/a&gt; around setting up a development environment to write a &lt;code&gt;Hello, World&lt;/code&gt; app in Express. Don&amp;rsquo;t worry about TypeScript for now.&lt;/p&gt;

&lt;p&gt;Think of something you&amp;rsquo;d like to build, and try to build it. Make sure your idea is really easy, because building it will probably actually be hard, and you might not finish, but that&amp;rsquo;s okay because you&amp;rsquo;ll have learned a lot. Hopefully you&amp;rsquo;ll have some fun. I sure did.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Citations Needed</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/citations-needed/"/>
    <id>https://ashfurrow.com/blog/citations-needed/</id>
    <published>2017-09-30T17:48:36+00:00</published>
    <updated>2017-09-30T17:48:36+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;As a part of my &lt;a href="https://ashfurrow.com/blog/and-i-feel-fine/"&gt;recent&lt;/a&gt;, er, &lt;a href="https://ashfurrow.com/blog/left-media-and-performative-podcasting/"&gt;radicalization&lt;/a&gt; I guess?, I&amp;rsquo;ve been listening to a lot of new podcasts. One in particular stands out above the rest: Citations Needed. I highly recommend you check it out (&lt;a href="https://soundcloud.com/citationsneeded"&gt;Soundcloud&lt;/a&gt;, &lt;a href="https://itunes.apple.com/us/podcast/citations-needed/id1258545975"&gt;iTunes&lt;/a&gt;, &lt;a href="https://www.patreon.com/citationsneededpodcast"&gt;Patreon&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Citations Needed is a media criticism podcast that discusses &amp;ldquo;the history of bullshit&amp;rdquo; and I&amp;rsquo;ve learned something from every episode. They bring on really knowledgeable guests, and the show is generally just really well produced.&lt;/p&gt;

&lt;p&gt;Their most recent episode is on the subject of the US national deficit. They discuss how the media&amp;rsquo;s framing of the deficit skews towards a very narrow interpretation of monetary policy (my life is very exciting right now). But seriously – it&amp;rsquo;s fascinating stuff. &lt;/p&gt;

&lt;p&gt;The episode also provides some &amp;ldquo;talking points&amp;rdquo; for answering questions from angry relatives at Thanksgiving like &amp;ldquo;how can the government afford the THIRTY TWO TRILLION DOLLARS to pay for single-payer!?&amp;rdquo;&lt;/p&gt;

&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/344260297&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;p&gt;If you like it, let me know 👍&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emotions Matter</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/emotions-matter/"/>
    <id>https://ashfurrow.com/blog/emotions-matter/</id>
    <published>2017-09-30T15:38:30+00:00</published>
    <updated>2017-09-30T15:38:30+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;I was &lt;a href="http://emaww.com/podcast/en/creating-compassionate-software-begins-engineer-ash-furrow/"&gt;recently interviewed by the Emotions Matter podcast&lt;/a&gt;, where I talked about open source, community-building, and the effects of automation on society.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/344489207&amp;amp;color=ff5d61&amp;amp;hide_related=true"&gt;&lt;/iframe&gt;

&lt;p&gt;Give it a listen and let me know what you think!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Technology is not Neutral</title>
    <link rel="alternate" href="https://ashfurrow.com/blog/technology-is-not-neutral/"/>
    <id>https://ashfurrow.com/blog/technology-is-not-neutral/</id>
    <published>2017-09-14T21:05:44+00:00</published>
    <updated>2017-09-14T21:05:44+00:00</updated>
    <author>
      <name>Ash Furrow</name>
    </author>
    <content type="html">&lt;p&gt;Facebook&amp;rsquo;s advertising algorithms are &lt;a href="https://www.propublica.org/article/facebook-enabled-advertisers-to-reach-jew-haters"&gt;back in the news&lt;/a&gt; after ProPublica discovered you could target antisemitic categories in your ad campaigns. The publication has &lt;a href="https://www.propublica.org/article/facebook-lets-advertisers-exclude-users-by-race"&gt;previously revealed&lt;/a&gt; that Facebook housing ads allowed landlords to exclude potential tenants based on their race.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s break this down, from like a moral/technical perspective. What Facebook has done is it&amp;rsquo;s created a piece of &amp;ldquo;neutral&amp;rdquo; technology. The ad-buying algorithm is a way for ad buyers to target audiences with relevant ads, based on information Facebook has gathered or inferred from its users. That&amp;rsquo;s straightforward and certainly sounds harmless. But Facebook failed to account for how its software would be used. For how its software &lt;em&gt;could&lt;/em&gt; be used.&lt;/p&gt;

&lt;p&gt;See, when you create technology based on real people, your technology is necessarily imbued with the biases and prejudices of those people. When Facebook runs an algorithm to determine whose attention is worth how much, its factoring in a lot of signals from people. Those signals carry bias, so the algorithm carries bias. The same premise can be applied to machine learning, too, which also suffers from this problem.&lt;/p&gt;

&lt;p&gt;This is why when Microsoft released a &amp;ldquo;neutral&amp;rdquo; chat bot into Twitter, it got &lt;a href="https://www.theverge.com/2016/3/24/11297050/tay-microsoft-chatbot-racist"&gt;really racist really quickly&lt;/a&gt;. Microsoft failed to account for what other bot-makers already knew: without foresight and prevention, technology can/will be used in ways that violate its own creators&amp;rsquo; values. &lt;/p&gt;

&lt;p&gt;Put another way: unless a technologist thinks ahead and puts in safeguards, they cannot control how the technology they create will be used.&lt;/p&gt;

&lt;p&gt;There are moral implications to building technology, and this is one of them: if your goal is neutrality, you &lt;em&gt;must&lt;/em&gt; tilt the scale in favour of those people that our society marginalizes. You &lt;em&gt;must&lt;/em&gt; overshoot towards social justice. Otherwise, your &amp;ldquo;neutral&amp;rdquo; technology only reinforces the existing imbalances in our society.&lt;/p&gt;

&lt;p&gt;Facebook is asking us to blame their algorithm for being racist, when in fact Facebook are the ones who messed up. They failed to anticipate these problems when they should have thought more carefully about how their software could be used. This should serve as a valuable lesson to all of us.&lt;/p&gt;
</content>
  </entry>
</feed>
