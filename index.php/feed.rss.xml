<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>Comparative Asynchronous Programming</title>
      <link>https://ashfurrow.com/blog/comparative-asynchronous-programming/</link>
      <description>&lt;p&gt;So I&amp;rsquo;m in Australia to give my talk at &lt;a href="http://playgroundscon.com"&gt;Playgrounds Conference&lt;/a&gt; about asynchronous programming. While we wait for the video to be edited and uploaded, I thought I could take you through the talk in blog post form. So let&amp;rsquo;s dive in!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="46f4ab568af449b8ac95aa4939f9e62e" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Today we&amp;rsquo;re going to be talking about asynchronous programming: what it is, why it&amp;rsquo;s important, and what it can look like in Swift. The topic is quite complicated and I don&amp;rsquo;t have enough time to go into a tonne of detail, but my goal isn&amp;rsquo;t depth, it&amp;rsquo;s breadth. I want to expose you to lots of ideas and give you hints about where to follow up to do your own research. &lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;re discussing four main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Asynchronous programming is difficult and there is no one &amp;ldquo;best&amp;rdquo; way to do it.&lt;/li&gt;
&lt;li&gt;Swift ships with some asynchronous abstractions, but they&amp;rsquo;re not great.&lt;/li&gt;
&lt;li&gt;But we can build our own abstractions in Swift!&lt;/li&gt;
&lt;li&gt;However, compiler limitations mean there are some abstractions we &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; build in Swift.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2 id="asynchronous-programming-difficult-and-subjective"&gt;Asynchronous Programming: Difficult and Subjective&lt;/h2&gt;

&lt;p&gt;Before we talk about asynchronous programming, let&amp;rsquo;s define it. To define it, let&amp;rsquo;s contrast it with synchronous programming. &amp;ldquo;Normal&amp;rdquo; programming, as contrasted with asynchronous programming, is the kind of programming you probably learned first. It&amp;rsquo;s where program execution starts at the top and executes each line of code in step, moving towards the bottom. The program waits for each line of code to finish before moving onto the next line. &lt;/p&gt;

&lt;p&gt;Most of the code Swift developers write is &amp;ldquo;normal&amp;rdquo;, or synchronous. Let&amp;rsquo;s take a look at an example.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;someFunctionCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an example of a synchronous, or &amp;ldquo;normal&amp;rdquo; Swift function call. It is synchronous, meaning from the call site&amp;rsquo;s perspective, it gets executed atomically. It starts, it finishes, all in one line of code.&lt;/p&gt;

&lt;p&gt;If all the function is doing is adding two numbers you&amp;rsquo;ve already loaded from RAM, it&amp;rsquo;ll be really fast. If it has to retrieve those from RAM first, it&amp;rsquo;ll be orders of magnitude slower. If you&amp;rsquo;re doing something complex like reading a file from disk, then it&amp;rsquo;ll be orders of magnitude slower still. At a certain point, you&amp;rsquo;re wasting CPU time waiting for file I/O, network I/O, or other long-running task to complete.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s where asynchronous programming comes in: it mitigates this wasted CPU time by letting programs do stuff while waiting for other code to get executed.&lt;/p&gt;

&lt;p&gt;Asynchronous programming is where you write code that&amp;rsquo;s executed out of order. Your program continues to execute new lines of code while it waits for previous lines to finish. Then, code gets executed in response to external signals like completed network requests, user interaction, all kinds of things! Code might get executed in parallel, too. Things get complicated quickly!&lt;/p&gt;

&lt;p&gt;Like most mainstream languages, Swift is really all about writing synchronous programming, and forces programmers to choose the appropriate abstractions. Which to choose?&lt;/p&gt;

&lt;p&gt;It depends.&lt;/p&gt;

&lt;p&gt;Software development is all about tradeoffs. Which abstraction you pick depend on which tradeoffs you want to make. Some languages and frameworks have strong opinions about how to do asynchronous programming, like &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt;. They use something called &amp;ldquo;non-blocking&amp;rdquo; functions because they have the benefit of never blocking the main thread. This is critical in JavaScript because there is only one thread, so blocking at any point blocks your whole app. Yikes!&lt;/p&gt;

&lt;p&gt;Non-blocking code is great but has its tradeoffs: imagine if almost every function call you made in Swift had a completion closure instead of a return value. That might be terrible, but it might be great! Let&amp;rsquo;s press on and explore.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// vs&lt;/span&gt;

&lt;span class="nf"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first example blocks while the second example is non-blocking. The blocking call is simpler to understand, since it happens atomically from the calcite&amp;rsquo;s perspective. But it&amp;rsquo;s less performant. The non-blocking call is better for performance but it doesn&amp;rsquo;t have an &amp;ldquo;immediate&amp;rdquo; return value, so it&amp;rsquo;s asynchronous nature propagates up the call stack. In effect, the code using it becomes non-blocking. This is annoying for developers, but you get really performant code.&lt;/p&gt;

&lt;p&gt;See? Tradeoffs.&lt;/p&gt;

&lt;p&gt;Swift doesn&amp;rsquo;t have that same kind of opinionated nature as Node.js, which is a shame because it leads to developers avoiding thinking about abstractions.&lt;/p&gt;

&lt;p&gt;To write modern software, you &lt;em&gt;have&lt;/em&gt; to write asynchronous code sometimes. And writing asynchronous code involves picking an abstraction; if you don&amp;rsquo;t think about which abstraction would be best in a given situation, you&amp;rsquo;re very unlikely to pick the best one for you.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the abstractions built-in to Swift.&lt;/p&gt;

&lt;h2 id="swift-has-async-built-in-sorta"&gt;Swift Has Async Built-in. Sorta.&lt;/h2&gt;

&lt;p&gt;Swift&amp;rsquo;s built-in abstractions are a bit lacking because it&amp;rsquo;s fairly unopinionated about asynchronous programming. Most of its asynchronous abstractions come directly from Objective-C, and aren&amp;rsquo;t that great. Let&amp;rsquo;s explore.&lt;/p&gt;

&lt;p&gt;(We&amp;rsquo;re going to limit ourselves to iOS, macOS, watchOS, and tvOS â€“ none of that &amp;ldquo;Swift on Linux&amp;rdquo; stuff.)&lt;/p&gt;

&lt;h3 id="grand-central-dispatch"&gt;Grand Central Dispatch&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Grand_Central_Dispatch"&gt;Grand Central Dispatch&lt;/a&gt; (GCD) is most helpful for managing threading, which is beyond the scope of this post. It&amp;rsquo;s probably not best to use GCD directly, but rather use it to build higher-level abstractions that are easier to think about. However, GCD is &lt;em&gt;super&lt;/em&gt; powerful.&lt;/p&gt;

&lt;h3 id="nsoperationqueue"&gt;NSOperationQueue&lt;/h3&gt;

&lt;p&gt;NSOperationQueues are built on top of GCD and allow you to &amp;ldquo;link&amp;rdquo; different operations together to form a complex dependency graph. They&amp;rsquo;re really cool! But kind of a pain to use directly. Check out &lt;a href="https://github.com/dstnbrkr/DRBOperationTree"&gt;DRBOperationTree&lt;/a&gt; for an example of an even more powerful abstraction built on top of operation queues.&lt;/p&gt;

&lt;h3 id="posix-threads"&gt;POSIX Threads&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to use &lt;a href="https://en.wikipedia.org/wiki/POSIX_Threads"&gt;POSIX threads&lt;/a&gt; in Swift but it&amp;rsquo;s far too low level, I really discourage this approach.&lt;/p&gt;

&lt;h3 id="target-action"&gt;Target / Action&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html"&gt;Target/action&lt;/a&gt; is a pattern that calls a specific function on a specific object. It is used throughout UIKit, usually for user interaction like button presses or gesture recognizers. This pattern works okay for small uses but doesn&amp;rsquo;t always scale well.&lt;/p&gt;

&lt;h3 id="callbacks-completion-handlers"&gt;Callbacks / Completion Handlers&lt;/h3&gt;

&lt;p&gt;Callbacks are built from closures, short anonymous functions that get executed later on in time. You&amp;rsquo;ve probably used these before at the completion of a network request or animation, but let&amp;rsquo;s take a closer look.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle login success or failure&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a &lt;code&gt;logIn(with:)&lt;/code&gt; function that takes a completion handler as its last parameter, and that handler gets executed when the login succeeds or fails.&lt;/p&gt;

&lt;p&gt;The thing is, it&amp;rsquo;s hard to stack a callback within a callback. Actually, it&amp;rsquo;s easy, but that&amp;rsquo;s the problem. Soon, you have callbacks within callbacks within callbacks, which are hard to debug and produce messy stack traces.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;getCredentialsFromUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="nf"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle login success or failure&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &amp;ldquo;triangle of doom&amp;rdquo; is the code creeping further and further from the left side of the screen (right side for RTL languages). This is bad enough, but things get worse when you consider handling errors appropriately.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;getCredentialsFromUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Handle login success&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Handle error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we have error handling strewn throughout our callbacks. Gross! Consider that none of these asynchronous functions work well with the built-in Swift error handling of &lt;code&gt;throws&lt;/code&gt;. What a shame.&lt;/p&gt;

&lt;p&gt;An important consideration when you&amp;rsquo;re writing a function that takes a call back is the callback&amp;rsquo;s &lt;em&gt;signature&lt;/em&gt;. What information are you going to pass to it? We generally want to pass either a value (in the success case) or something else (in the failure case). A simple approach is to use an Optional.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;nil&lt;/code&gt; value will represent a failure, and a non-&lt;code&gt;nil&lt;/code&gt; value will represent a success. This works well for small cases but has a limitation: what if we want to know &lt;em&gt;what&lt;/em&gt; went wrong?&lt;/p&gt;

&lt;p&gt;We could just add an optional &lt;code&gt;Error&lt;/code&gt; parameter, and in some ways that would be an improvement. The &lt;code&gt;Error&lt;/code&gt; can be used to take appropriate follow-up action after an error is encountered.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, we&amp;rsquo;ve introduced some ambiguity into our code. What happens if both of the parameters are &lt;code&gt;nil&lt;/code&gt;? What happens if neither of them are?&lt;/p&gt;

&lt;p&gt;An even better approach is to use a Result type.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Credentials&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A result represents either a success or an error. Because Swift is so keen on staying unopinionated, it doesn&amp;rsquo;t have a result type built in. You can either use &lt;a href="https://github.com/antitypical/Result"&gt;the Result library&lt;/a&gt; or make one yourself.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result uses Swift enums to define two cases: a success, with an associated generic value, and an error with an associated error value. Since the result has to be exactly one of these two cases, there&amp;rsquo;s no ambiguity when writing you code!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re going to use callbacks to write asynchronous code in Swift, I highly encourage you to use a Result type as a parameter to the callback. Not only is it clean, but it&amp;rsquo;s also a gateway to using higher-level abstractions. Something something monad.&lt;/p&gt;

&lt;p&gt;Callbacks are useful for one-off async methods. You don&amp;rsquo;t need a fancy async approach if all you&amp;rsquo;re doing is, say, fetching some photos from the user&amp;rsquo;s library. But if you find yourself nesting callbacks within each other, look for a better solution.&lt;/p&gt;

&lt;h2 id="some-async-abstractions-are-supported-in-swift"&gt;Some Async Abstractions are Supported in Swift&lt;/h2&gt;

&lt;p&gt;As developers, we aren&amp;rsquo;t constrained to only using what our language and frameworks supply. We can use open source libraries and build our own abstractions that are better suited for our needs. There a tonne of abstractions out there to use, let&amp;rsquo;s take a look at a few popular ones.&lt;/p&gt;

&lt;h3 id="promises-futures"&gt;Promises &amp;amp; Futures&lt;/h3&gt;

&lt;p&gt;(Promises and futures are technical distinct but I&amp;rsquo;m not going into the differences between them. We&amp;rsquo;ll use them interchangeably here.)&lt;/p&gt;

&lt;p&gt;A future is a class that represents a future value or error. You write your code based on how you would deal with a future value or error, and later when it happens, the correct code gets run. Lots of libraries already exist in Swift for promises and futures. Let&amp;rsquo;s look at one called &lt;a href="https://github.com/Thomvis/BrightFutures"&gt;BrightFutures&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;getCredentialsFromUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onSuccess&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle login success&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onFailure&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle login error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that there are a few big improvements over simple callbacks. First, transforming one future into another is really easy using &lt;code&gt;flatMap&lt;/code&gt;. Second, error handling is all done at the end in one spot. An error from any future is propagated through the chain, so you don&amp;rsquo;t end up writing duplicated error-handling code. Nice!&lt;/p&gt;

&lt;h3 id="functional-reactive-programming"&gt;Functional Reactive Programming&lt;/h3&gt;

&lt;p&gt;I couldn&amp;rsquo;t talk about asynchronous programming without discussing my favourite abstraction: functional reactive programming. Briefly, FRP encapsulates a stream of events that you can observe:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New value events.&lt;/li&gt;
&lt;li&gt;Error events.&lt;/li&gt;
&lt;li&gt;Completion events.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These streams, called observables, finish with either an error or completion event (never both), and they stop sending events afterwards. I&amp;rsquo;ve written a whole &lt;a href="https://ashfurrow.com/blog/reactivecocoa-vs-rxswift/"&gt;blog post&lt;/a&gt; about choosing an FRP library, but let&amp;rsquo;s explore some &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt; examples.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;getCredentialsFromUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
      &lt;span class="c1"&gt;// Handle login success&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
      &lt;span class="c1"&gt;// Handle login error&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ðŸ¤”&lt;/p&gt;

&lt;p&gt;That FRP code looks &lt;em&gt;really&lt;/em&gt; similar to futures/promises. That&amp;rsquo;s because our code is structured such that it only sends one value and then it&amp;rsquo;s done. FRP has all the benefits of promises, and then some, and FRP is at its best when used for streams of values that get sent over a long period of time.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="n"&gt;gerstureRecognizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;recognizer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;recognizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recognizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a better RxSwift example. We have a gesture recognizer that sends new value events ever time the user moves their finger on the screen. Then we map those events into locations, and bind those location events into a circle view&amp;rsquo;s &lt;code&gt;center&lt;/code&gt; position. In five lines of code, we&amp;rsquo;ve written asynchronous gesture recognizer handling to have a view follow a user&amp;rsquo;s finger. Cool!&lt;/p&gt;

&lt;p&gt;I should mention that RxSwift works well with idiomatic error-throwing in Swift, too. Even cooler.&lt;/p&gt;

&lt;p&gt;FRP would be my recommendation for a fully-featured async approach. The abstractions are great and super-powerful, but do take some getting used to. If FRP is too complex for your needs, stick to using promises.&lt;/p&gt;

&lt;h3 id="actor-model"&gt;Actor Model&lt;/h3&gt;

&lt;p&gt;This is probably the most far-out approach we&amp;rsquo;ll discuss today. &lt;a href="https://en.wikipedia.org/wiki/Actor_model"&gt;Actor-based programming&lt;/a&gt; treats &amp;ldquo;actors&amp;rdquo; as primitives for concurrent computation. &lt;a href="http://akka.io"&gt;Akka&lt;/a&gt; is a popular library for using actors in Scala, we use it at Artsy and it&amp;rsquo;s pretty cool.&lt;/p&gt;

&lt;p&gt;This diagram is from &lt;a href="http://doc.akka.io/docs/akka/current/scala/actors.html"&gt;Akka&amp;rsquo;s documentation&lt;/a&gt;, don&amp;rsquo;t look at it â€“ it&amp;rsquo;s too complicated!&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/comparative-asynchronous-programming/akka.png" alt="Akka actor lifecycle diagram" /&gt;&lt;/p&gt;



&lt;p&gt;The actor model provides a number of constraints and conditions that make async robust, but more complicated.&lt;/p&gt;

&lt;p&gt;Different implementations, but generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Actors receive messages in unspecified order and have to react to those messages.&lt;/li&gt;
&lt;li&gt;Actors can create child actors to perform some work â€“ no callbacks!&lt;/li&gt;
&lt;li&gt;Actors can maintain local state, so they can respond to a message differently when called subsequent times.&lt;/li&gt;
&lt;li&gt;Actors maintain a hierarchy, leading to great error-tolerance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actors are definitely overkill for nearly all iOS applications, But properly implemented, Actors can be used to write fault-tolerant, highly performant distributed systems&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.erlang.org"&gt;Erlang&lt;/a&gt; proved the actor model was feasible and helped to popularize it. As Swift&amp;rsquo;s popularity outside iOS/macOS apps grows, I&amp;rsquo;m looking forward to seeing how the Actor Model gets used in Swift.&lt;/p&gt;

&lt;h2 id="some-async-abstractions-are-impossible-in-swift"&gt;Some Async Abstractions are Impossible in Swift&lt;/h2&gt;

&lt;p&gt;Due to compiler limitations, there are some asynchronous approaches that are impossible to do in Swift, at least for now.&lt;/p&gt;

&lt;h3 id="async-await"&gt;Async / Await&lt;/h3&gt;

&lt;p&gt;This abstraction is supported in JavaScript and C# and is very popular in those languages. Why? It lets you write code that looks &amp;ldquo;normal&amp;rdquo; but is actually asynchronous under the hood. It&amp;rsquo;s  powerful and expressive and not yet possible in Swift for reasons we&amp;rsquo;ll discuss shortly.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;getCredentialsFromUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a &lt;code&gt;logIn()&lt;/code&gt; function that appears to return a value synchronously, but in this hypothetical syntax, we see that the function has been marked asynchronous with the &lt;code&gt;async&lt;/code&gt; keyword. When the function execution reaches &lt;code&gt;await getCredentialsFromUser()&lt;/code&gt;, the function &lt;em&gt;pauses&lt;/em&gt; and waits for that function to return a value, asynchronously. At that point, the function execution will resume. How cool is that! Check out &lt;a href="http://khanlou.com/2016/09/async-await/"&gt;this great blog post&lt;/a&gt; for more details on a hypothetical async/await in Swift.&lt;/p&gt;

&lt;p&gt;Async/await isn&amp;rsquo;t perfect â€“ for example, mixing async/await with regular callback closures is really hard to do. They&amp;rsquo;re an opinionated aspect of a programming language, and so they fit in well with opinionated languages like C# and modern JavaScript. Plus they work with throwing errors, so we could write idiomatic Swift error-handling.&lt;/p&gt;

&lt;p&gt;Async/await is the way I wish Swift had done async programming, it&amp;rsquo;s probably the ideal but is now too late to standardize on.&lt;/p&gt;

&lt;p&gt;Additionally, some asynchronous needs aren&amp;rsquo;t well-met by async/await. It would be hard to write gesture recognizer code this way, which works best with existing Swift-supported abstractions like FRP or target/action.&lt;/p&gt;

&lt;h3 id="coroutines-and-generator-functions"&gt;Coroutines and Generator Functions&lt;/h3&gt;

&lt;p&gt;These are the strangest things I came across in researching different asynchronous programming approaches. Why? Because &lt;a href="http://exploringjs.com/es6/ch_generators.html"&gt;coroutines/generators&lt;/a&gt; violate some of the base assumptions I&amp;rsquo;d made about programming. Assumptions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions can only complete once.&lt;/li&gt;
&lt;li&gt;Functions can only return a value once.&lt;/li&gt;
&lt;li&gt;Function execution always starts at the top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Coroutines and generator functions aren&amp;rsquo;t typically used directly, but are required to make async/await. Swift doesn&amp;rsquo;t have support for coroutines yet, so that&amp;rsquo;s why Swift can&amp;rsquo;t have async/await like JavaScript or C#.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;fibGenerator&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;repeat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;fibGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns 1&lt;/span&gt;
&lt;span class="nf"&gt;fibGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;
&lt;span class="nf"&gt;fibGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="nf"&gt;fibGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// returns 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;fibGenerator&lt;/code&gt; function has been marked as a &lt;em&gt;generator&lt;/em&gt; using the &lt;code&gt;*&lt;/code&gt;, a syntax borrowed from JavaScript. It looks like an infinite loop, but it actually returns a value using the &lt;code&gt;yield&lt;/code&gt; keyword and then pauses execution until it gets called again. Every time you call the function, it resumes execution, loops, and yields a new value. How cool is that?&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t code you might actually use â€“ JavaScript developers don&amp;rsquo;t often use generators directly, but rather use them to but higher level abstractions like async/await.&lt;/p&gt;

&lt;h2 id="wrap-up"&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve covered a lot of ground today. We talked about what asynchronous programming is and why there&amp;rsquo;s no single &amp;ldquo;best&amp;rdquo; solution. Then we discussed the asynchronous approaches built into Swift, the approaches we can build ourselves in Swift, and finally the approaches we can&amp;rsquo;t yet build in Swift.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;ðŸ¤”&lt;a href="https://twitter.com/hashtag/playgroundscon?src=hash"&gt;#playgroundscon&lt;/a&gt; Great talk on (almost) all things async &lt;a href="https://twitter.com/ashfurrow"&gt;@ashfurrow&lt;/a&gt; &lt;a href="https://t.co/99iHsLBR4A"&gt;pic.twitter.com/99iHsLBR4A&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bjorn Ho (@nrg84) &lt;a href="https://twitter.com/nrg84/status/834909007148036096"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you made this face a few times while reading. It&amp;rsquo;s always a good idea to learn new things, even if they&amp;rsquo;re not directly applicable to your job, just to know they&amp;rsquo;re out there. If you see something cool you&amp;rsquo;d like in Swift, head over to &lt;a href="https://github.com/apple/swift-evolution"&gt;Swift Evolution&lt;/a&gt; and talk to the language community. Together, we can help shape the future of Swift.&lt;/p&gt;

&lt;p&gt;Especially as Swift gains popularity outside of just building apps, I&amp;rsquo;m incredibly excited to see how it continues to evolve. I&amp;rsquo;m particularly keen to see new asynchronous abstractions become possible in my favourite language.&lt;/p&gt;
</description>
      <pubDate>Fri, 24 Feb 2017 09:39:20 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/comparative-asynchronous-programming/</guid>
    </item>
    <item>
      <title>Swift vs. React Native Feels</title>
      <link>https://ashfurrow.com/blog/swift-vs-react-native-feels/</link>
      <description>&lt;p&gt;So this past week, my colleague Orta wrote a blog post, &lt;a href="http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/"&gt;Retrospective: Swift at Artsy&lt;/a&gt;. It&amp;rsquo;s a long read, but worth it. The post describes &lt;em&gt;why&lt;/em&gt; we made the decision to move all new development into React Native instead of Swift.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s my side of the story: my team make a decision I disagreed with, but it turned out to be the right decision for us. I had to come to terms with that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;See, I like Swift. I liked it from the day it was announced because &lt;a href="https://ashfurrow.com/blog/we-need-to-replace-objective-c/"&gt;it wasn&amp;rsquo;t Objective-C&lt;/a&gt;. I pushed for us to adopt it at Artsy, and &lt;a href="https://github.com/artsy/eidolon"&gt;the code we wrote&lt;/a&gt; there has become a landmark for the entire OSS community.&lt;/p&gt;

&lt;p&gt;So when Eloy proposed writing apps in JavaScript â€“ &lt;em&gt;JavaScript!&lt;/em&gt; â€“ I was unenthusiastic. However, Eloy is the most pragmatic and level-headed developer I know, and he reached the decision to move to React Native after months of careful study, so I kept an open mind. And I&amp;rsquo;m glad I did.&lt;/p&gt;

&lt;p&gt;I decided to look into JavaScript and started contributing to JS web projects at Artsy last year. And I was surprised to see that the modern JS development workflow is &lt;em&gt;slick&lt;/em&gt;. Like, &lt;em&gt;really slick&lt;/em&gt;. The tooling has been built with developer experience front of mind, and it shows. Orta goes into more detail in his post, but suffice it to say that compared to Xcode and Swift development, the JS workflow is matured and polished.&lt;/p&gt;

&lt;p&gt;After getting some first-hand experience with JavaScript, and learning more about &lt;a href="http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/"&gt;React Native, Relay, and GraphQL&lt;/a&gt;, I was on board with using React Native at Artsy. The decision made sense, from our perspective. And it might not from yours â€“ that&amp;rsquo;s okay! Each team has different priorities and will make different compromises. &lt;/p&gt;

&lt;p&gt;However&amp;hellip;&lt;/p&gt;

&lt;p&gt;I still had trouble accepting the decision, even after I agreed with it. At Artsy, every line of Swift I write now is legacy code, and that&amp;rsquo;s a new feeling for me. I don&amp;rsquo;t like it.&lt;/p&gt;

&lt;p&gt;Swift is awesome and it sucks to &lt;em&gt;feel bad&lt;/em&gt; writing it. It&amp;rsquo;s something I&amp;rsquo;ve had to get used to, I guess my honeymoon with Swift had to end sometime.&lt;/p&gt;

&lt;p&gt;I want Swift to succeed, and I still think it will. It&amp;rsquo;s a great language with a kick-ass community, backed by a company with a vested interest in seeing it explode in popularity. &lt;/p&gt;

&lt;p&gt;As luck would have it, Artsy needs someone to maintain all their Swift code, so I&amp;rsquo;ll be writing Swift for a long time ðŸ˜‰ &lt;/p&gt;

&lt;p&gt;And I have to acknowledge: I really enjoy the JS workflow. JS had a decades-long  head start, and I hope Apple engineers are looking to close the gap. (&lt;a href="http://isxcodeopensourceyet.github.io"&gt;Hint hint&lt;/a&gt;).&lt;/p&gt;
</description>
      <pubDate>Sat, 11 Feb 2017 18:12:20 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/swift-vs-react-native-feels/</guid>
    </item>
    <item>
      <title>Ugh 2017</title>
      <link>https://ashfurrow.com/blog/ugh-2017/</link>
      <description>&lt;p&gt;Last week I visited Canada and while I was outside the country, shit went down. An Executive Order was signed that limited refugees and immigration, and US Customs acted arbitrarily towards people entering the country. I was afraid that I&amp;rsquo;d be turned away at the border because I&amp;rsquo;m a foreigner and because I disagree with the current Administration. Even though I&amp;rsquo;ve called New York my home for two years.&lt;/p&gt;

&lt;p&gt;I made it over without a problem, but I was still afraid. I protected my Twitter account and stopped tweeting things I thought would agitate border agents. I was scared.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Ugh.&lt;/p&gt;

&lt;p&gt;People died after being turned away from the border, but all I suffered was a small panic attack. I&amp;rsquo;ve lost an Ativan while others have lost their dreams, or their lives. I feel guilty even contemplating how bad I have it because I know others have it far, far worse.&lt;/p&gt;

&lt;p&gt;2017 sucks. But I saw something the other day that profoundly changed my outlook on things, and my view of myself in this political climate.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Resistance requires intersectionality. It requires that you know and live Lilla Watson&amp;rsquo;s principle. Know your freedom is bound up w mine. &lt;a href="https://t.co/CqFgayDm9p"&gt;pic.twitter.com/CqFgayDm9p&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brittany Packnett (@MsPackyetti) &lt;a href="https://twitter.com/MsPackyetti/status/825723153519353856"&gt;January 29, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to keep working, keep volunteering in New York to help others, and keep writing for myself. This is the only life I&amp;rsquo;ll ever have and I refuse to spend it in fear.&lt;/p&gt;
</description>
      <pubDate>Wed, 01 Feb 2017 19:05:46 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/ugh-2017/</guid>
    </item>
    <item>
      <title>Naming Things in Swift</title>
      <link>https://ashfurrow.com/blog/naming-things-in-swift/</link>
      <description>&lt;p&gt;Lately, I&amp;rsquo;ve been using different programming languages and environments, trying to diversify my skills. I&amp;rsquo;ve been working regularly in React, Swift, Objective-C, and Scala, and they all have their own idioms and conventions. It&amp;rsquo;s been a real learning experience, getting to compare and contrast the languages, and to use what I learn to become a better Swift developer, too.&lt;/p&gt;

&lt;p&gt;My manager, who has been helping me learn Scala, sent me this awesome &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html"&gt;blog post about naming things&lt;/a&gt; and it blew me away with its comprehensive description of when to use different levels of verbosity in Scala. So my goal today is to provide a similarly awesome blog post about when to be concise and when to be verbose, in Swift. I&amp;rsquo;m going to be borrowing some examples and points from this Scala post, relating things back to Swift and iOS apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Whether or not you prefer conciseness when programming, Swift has language features that allow you to write your code at your preferred level of verbosity. Beyond naming, features like trailing closure syntax, unnamed parameters, positional closure arguments allow programmers to be verbose in some circumstances and succinct in others.&lt;/p&gt;

&lt;p&gt;The question isn&amp;rsquo;t &lt;em&gt;if&lt;/em&gt; you should be concise (or not). The question is: &lt;em&gt;where&lt;/em&gt; you should be concise (or verbose).&lt;/p&gt;

&lt;p&gt;Swift has been around long enough that it&amp;rsquo;s started to develop idioms that code should generally adhere to. The creators of Swift have been kind enough to release &lt;a href="https://swift.org/documentation/api-design-guidelines/"&gt;official API design guidelines&lt;/a&gt; which are an excellent read. These are great, but I want more: I want to talk about how to develop an &lt;em&gt;intuition&lt;/em&gt; about idiomatic Swift. We&amp;rsquo;re going to cover intutively naming things in detail, then move onto a discussion of language features.&lt;/p&gt;

&lt;h2 id="philosophy"&gt;Philosophy&lt;/h2&gt;

&lt;p&gt;The principles of the Swift API design that specifically touch on naming things are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clarity at the point of use is your most important goal.&lt;/li&gt;
&lt;li&gt;Clarity is more important than brevity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fantastic guidelines, but let&amp;rsquo;s go further. Haoyi&amp;rsquo;s Scala blog post tells us that our goal when naming something is to:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Show programmers something they don&amp;rsquo;t already know, but want to know.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;This is an interesting guideline because it requires us to think about the context of our code, and who will be working with it in the future. Remember: code is written only once, but is read over and over, so programmers should optimize for &lt;em&gt;ease of reading&lt;/em&gt; and not ease of writing. And, the most important thing to consider when optimize for reading is &lt;em&gt;context&lt;/em&gt;. The Scala blog post &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html#Philosophy"&gt;lays this out well&lt;/a&gt;, and says that context includes both things the programmer already knows, and things they want to know:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Programmers already know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things they&amp;rsquo;ve seen before in your codebase&lt;/li&gt;
&lt;li&gt;Things they&amp;rsquo;ve seen before in other codebases&lt;/li&gt;
&lt;li&gt;Facts they&amp;rsquo;ve picked up in previous jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programmers want to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things that affect what they&amp;rsquo;re doing&lt;/li&gt;
&lt;li&gt;Things which they need to understand&lt;/li&gt;
&lt;li&gt;Things they are unfamiliar with&lt;/li&gt;
&lt;li&gt;Things that are especially dangerous, whether due to correctness, security, performance, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not comprehensive.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Think about who will be reading your code, and when. Is it a colleague, who will use the code every day? Or maybe yourself six months from now? Are you trying to encourage more casual contributions to your open source project? These different situations may affect how you name some function. Let&amp;rsquo;s examine.&lt;/p&gt;

&lt;p&gt;A colleague using your code every day is likely to be thoroughly familiar with your codebase and its conventions, so pithy code might be best. If you don&amp;rsquo;t plan on working on the codebase for six months, you&amp;rsquo;ll likely return to it unfamiliar with its conventions, so being wordy might be most helpful. Casual contributors to open source projects probably won&amp;rsquo;t understand how large codebases fit together, so being overly verbose could help improve the number of contributions to your project.&lt;/p&gt;

&lt;p&gt;Think about who is likely to read your code, and what their goals are. &lt;/p&gt;

&lt;h2 id="guidelines"&gt;Guidelines&lt;/h2&gt;

&lt;p&gt;These are guidelines, not axioms. Break the rules if your intuition tells you to. Let&amp;rsquo;s discuss guidelines for naming things in rough order of importance. And remember: always keep context in mind!&lt;/p&gt;

&lt;p&gt;(Please remember that I&amp;rsquo;m adapting these naming guidelines &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html#long-names-vs-short-names"&gt;from the original article&lt;/a&gt; for Swift â€“ we owe that post and its author, &lt;a href="https://github.com/lihaoyi"&gt;Li Haoyi&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id="wider-scoped-names-should-be-longer"&gt;Wider-Scoped Names Should Be Longer&lt;/h3&gt;

&lt;p&gt;Why is the name &lt;code&gt;i&lt;/code&gt; okay in this example?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But not in this one?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;MyStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider where &lt;code&gt;i&lt;/code&gt; is being referred from within the codebase. In the first example, &lt;code&gt;i&lt;/code&gt; is only accessed from within the &lt;code&gt;for&lt;/code&gt; loop. But in the second example, it is a member of a struct and is accessed by any code using that struct, possibly the entire codebase! At a glance, it&amp;rsquo;s impossible to find out the context of &lt;code&gt;i&lt;/code&gt; because it&amp;rsquo;s so widely used. &lt;/p&gt;

&lt;p&gt;Remember: we want to tell the programmer reading the code something they don&amp;rsquo;t know but want to know. Let&amp;rsquo;s fix the struct.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;MyStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;numberOfInteractions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn&amp;rsquo;t mean that all loop variables should be short, it only means that &lt;em&gt;widely&lt;/em&gt; used names should be longer. Let&amp;rsquo;s see a counterexample, where a short variable name in a loop can be a bad idea.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repeating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="nf"&gt;writeToDb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformedData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Tricky C API...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we can all agree that &lt;code&gt;i&lt;/code&gt; would benefit from a longer name. Why? Because its scope of use is wider, and it&amp;rsquo;s used more. That brings us to our next guideline.&lt;/p&gt;

&lt;h3 id="more-used-names-should-be-shorter"&gt;More-Used Names Should be Shorter&lt;/h3&gt;

&lt;p&gt;Consider &lt;code&gt;print&lt;/code&gt;, probably the first function you learned in Swift. As a function name, &amp;ldquo;print&amp;rdquo; works perfectly well:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi there!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So why doesn&amp;rsquo;t &amp;ldquo;cache&amp;rdquo; work well here?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;AppDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIResponder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;downloader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Only called at app startup.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; is used a lot and any Swift developer could be expected to be familiar with it. &lt;code&gt;cache&lt;/code&gt; is only used once and is defined in a custom object that probably doesn&amp;rsquo;t get looked at all too often. It could benefit from a longer name.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;initializeCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much nicer.&lt;/p&gt;

&lt;h3 id="dangerous-names-should-be-longer"&gt;Dangerous Names Should be Longer&lt;/h3&gt;

&lt;p&gt;Some functions should be long because of what they &lt;em&gt;do&lt;/em&gt;. Dangerous functions should be long, while boring ones should be shorter. This is a function that&amp;rsquo;s &lt;em&gt;too&lt;/em&gt; long.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadDataFieldsFromOfflineCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could be something like this instead: &lt;code&gt;loadFromCache&lt;/code&gt;. &lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadFromCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But consider this function, which really benefits from being quite long:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteAPICredentialsFromCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function has a long name because it&amp;rsquo;s dangerous to call it: we always want to avoid deleting user data by accident. For that reason you wouldn&amp;rsquo;t want to call it something really succinct, like:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;delToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* deletes user data omg! */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember: we want to tell the developer reading the name something they don&amp;rsquo;t know but that they &lt;em&gt;do&lt;/em&gt; want to know. I imagine whoever calling this function definitely wants to know if it deletes user data!&lt;/p&gt;

&lt;h3 id="names-with-source-context-should-be-shorter"&gt;Names with Source-Context Should be Shorter&lt;/h3&gt;

&lt;p&gt;Types with names that exist inside types should be shorter, and ones that exist outside types should be longer. Consider the following:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s probably too short, since we don&amp;rsquo;t know what the &lt;code&gt;Delegate&lt;/code&gt; protocol is &lt;em&gt;for&lt;/em&gt;. Let&amp;rsquo;s improve it by giving it a longer name:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;DownloaderDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! Now the name helps us know what the protocol is for. &lt;/p&gt;

&lt;p&gt;If the Swift compiler supported protocols within types, an alternative improvement would be:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would extend its &lt;em&gt;fully qualified&lt;/em&gt; name to be &lt;code&gt;Downloader.Delegate&lt;/code&gt;. But alas, Swift doesn&amp;rsquo;t yet support this kind of protocol nesting.&lt;/p&gt;

&lt;p&gt;Just make sure to avoid duplicating type information within names:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;DownloaderDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Developers already know that types inside the &lt;code&gt;Downloader&lt;/code&gt; class have to do with that class, so repeating that information is superfluous. This brings us to our final guideline:&lt;/p&gt;

&lt;h3 id="strongly-typed-names-should-be-shorter"&gt;Strongly Typed Names Should be Shorter&lt;/h3&gt;

&lt;p&gt;Swift has a powerful, expressive type system and we can use that to make our names shorter. For example, consider the following property:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;downloaderDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We already know that the delegate property belongs to the &lt;code&gt;Downloader&lt;/code&gt; class, so giving it &lt;code&gt;downloaderDelegate&lt;/code&gt; as a property name is excessive. &lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another counterexample:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;zipTwoSequences&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead, the standard library contains only:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because it&amp;rsquo;s obvious from the type signature that the arguments are sequences.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for naming guidelines, let&amp;rsquo;s talk about Swift features that let us be concise!&lt;/p&gt;

&lt;h2 id="omitting-names-entirely"&gt;Omitting Names Entirely&lt;/h2&gt;

&lt;p&gt;On the spectrum of verbose to succinct, at the very end of &amp;ldquo;succinct&amp;rdquo;, we have the option to just not name things &lt;em&gt;at all&lt;/em&gt;. You can do this with trailing closure syntax, with unnamed parameters, and with positional closure arguments. When to use them is a matter of following the guidelines outlined above.&lt;/p&gt;

&lt;p&gt;Trailing closure syntax is really handy, it helps make calling functions more concise. Borrowing from the Ray Wenderlich Swift Style Guide &lt;a href="https://github.com/raywenderlich/swift-style-guide#closure-expressions"&gt;section on closures&lt;/a&gt;: don&amp;rsquo;t use trailing closure syntax if the &lt;em&gt;purpose&lt;/em&gt; of the closure is ambiguous. For example, this would be bad:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would definitely be more clear:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For unnamed parameters, I&amp;rsquo;ll refer you to the official Swift API Guidelines &lt;a href="https://swift.org/documentation/api-design-guidelines/#argument-labels"&gt;on argument labels&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Omit all labels when arguments cannot be usefully distinguished (ex: &lt;code&gt;union(set1, set2)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Omit labels when its clear from the grammar of the function name what the first argument is (ex: &lt;code&gt;addSubview(y)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Omit labels for type conversion (ex: &lt;code&gt;Int64(someUInt32)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Otherwise (generally) include argument labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, that brings us to positional closure arguments. When to use these depends mostly on the length of your closure, and closely matches the &amp;ldquo;Wider-Scoped Names Should Be Longer&amp;rdquo; rule. &lt;/p&gt;

&lt;p&gt;If your closure does only a few things, use positional closure arguments:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a counterexample of being overly verbose:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is what things would look like if you don&amp;rsquo;t adhere to the first two guidelines about naming things.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repeating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fromData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, refer to the Ray Wenderlich guide for more info on closures.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Remember, the guidelines we&amp;rsquo;ve discussed today are not absolutes. Experiment, ask others, and learn. Have fun!&lt;/p&gt;
</description>
      <pubDate>Sat, 14 Jan 2017 21:15:11 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/naming-things-in-swift/</guid>
    </item>
    <item>
      <title>Building Static Sites with Middleman</title>
      <link>https://ashfurrow.com/blog/building-static-sites-with-middleman/</link>
      <description>&lt;p&gt;I recently launched this &lt;a href="http://peerlab.community"&gt;Peer Lab website&lt;/a&gt; to list the peer labs around the world and to provide instructions on starting one. It&amp;rsquo;s a small site with no need for a backend, so I decided to host it as static HTML. However, it was important that adding new labs would be easy for outside contributors. Since I had used the tool before to build a few static websites â€“ including this blog â€“ I turned to &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s explore the exact process I went through. I&amp;rsquo;m going to provide a series of high-level steps and link to actual code when I can, so you can replicate this for whatever site you need to build. However, every website is different, so &amp;ldquo;some assembly required&amp;rdquo; ðŸ˜‰&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The first thing you&amp;rsquo;ve got to do is create a new GitHub repository. We&amp;rsquo;ll use the repo to store the source code and also to host the site (each on their own branch, but more on that later). Install Middleman with &lt;code&gt;gem install middleman&lt;/code&gt;, and then run &lt;code&gt;middleman init&lt;/code&gt; to create the empty scaffold of your site. You can now run &lt;code&gt;middleman&lt;/code&gt; to start a server and browse the site locally. Nice! Time to commit your changes and push.&lt;/p&gt;

&lt;p&gt;Okay, so we&amp;rsquo;re running locally. Now we need to be able to deploy. I added the &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem to my Gemfile and ran &lt;code&gt;bundle install&lt;/code&gt;, and followed &lt;a href="https://github.com/edgecase/middleman-gh-pages#installation"&gt;their instructions&lt;/a&gt; to create a new Rake task. Now deploying to GitHub Pages is as easy as typing &lt;code&gt;rake publish&lt;/code&gt;. Try it out to make sure it works: it will build the site using Middleman and push a copy of the static HTML to the &lt;code&gt;gh-pages&lt;/code&gt; branch of your repo. Nice! Commit your changes and push them.&lt;/p&gt;

&lt;p&gt;Optionally, follow the &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;GitHub Pages documentation&lt;/a&gt; on using a custom domain name. Put the &lt;code&gt;CNAME&lt;/code&gt; file in the &lt;code&gt;source&lt;/code&gt; directory of your site&amp;rsquo;s repo.&lt;/p&gt;

&lt;p&gt;Now that we have deploys working, it&amp;rsquo;s time to automate them. Set up a new CI project on Travis or Circle CI (I used Travis, but they&amp;rsquo;re both awesome choices). CI is going to need to be able to push to your GitHub repo, so you&amp;rsquo;ll need a GitHub personal access token with the necessary permissions, stored in a CI secure environment variable. Once you&amp;rsquo;ve done that, we need to tell &lt;code&gt;git&lt;/code&gt; to use the token when pushing to GitHub. In your CI setup, add something like the following:&lt;/p&gt;


&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;before_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo -e "machine github.com\n  login ci-user\n  password $GITHUB_API_KEY" &amp;gt;&amp;gt; ~/.netrc&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;chmod 600 ~/.netrc&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git config --global user.email "ash@ashfurrow.com"&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git config --global user.name "Ash Furrow (via Travis)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Storing the access token in &lt;code&gt;.netrc&lt;/code&gt; provides the login info for when &lt;code&gt;git&lt;/code&gt; tries to push to GitHub, via the &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem. Nice. &lt;/p&gt;

&lt;p&gt;Your CI needs some sort of script to test that the site generated successfully. I use &lt;code&gt;bundle exec middleman build --build-dir=test&lt;/code&gt; to generate the site in a &lt;code&gt;test&lt;/code&gt; directory. I want the testing and the deploying to be separate, but this means that we&amp;rsquo;re actually building the site twice. It&amp;rsquo;s a performance hit, but not a huge deal unless your site is huge.&lt;/p&gt;

&lt;p&gt;Ok, so in your CI config, after a successful build, we&amp;rsquo;ll want to add the following line: &lt;code&gt;bundle exec rake travis ALLOW_DIRTY=true&lt;/code&gt;. This executes the &lt;code&gt;travis&lt;/code&gt; Rake task with &lt;code&gt;ALLOW_DIRTY&lt;/code&gt;, needed for the GitHub Pages deploy gem. Let&amp;rsquo;s create that Rake task to &lt;em&gt;only&lt;/em&gt; deploy on pushes to master. Here&amp;rsquo;s what it looks like for Travis:&lt;/p&gt;


&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:travis&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TRAVIS_BRANCH'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;pull_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TRAVIS_PULL_REQUEST'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s1"&gt;'Must be run on Travis'&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pull_request&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Skipping deploy for pull request; can only be deployed from master branch.'&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Skipping deploy for &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; can only be deployed from master branch."&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'publish'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This script will look different for Circle, check out &lt;a href="https://circleci.com/docs/environment-variables/"&gt;their documentation&lt;/a&gt; for more details. Commit your changes and push them to GitHub. Watch your CI and â€“ if everything goes right â€“ your site should be deployed automatically, within minutes. Awesome!&lt;/p&gt;

&lt;p&gt;Now that the deploy process is automated, we can really quickly iterate on the site&amp;rsquo;s content and design. Oh hey, design, that&amp;rsquo;s a great idea! Time to replace the Middleman scaffold. &lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://startbootstrap.com"&gt;Start Bootstrap&lt;/a&gt; and grab one of their templates. After you&amp;rsquo;ve picked one, give it attribution in your site&amp;rsquo;s Readme. Importing the template itself is kind of tricky, as it&amp;rsquo;s different for each template. You&amp;rsquo;ll want to start by moving the templates&amp;rsquo; JavaScript files into the &lt;code&gt;source/javascripts&lt;/code&gt; directory of your Middleman site, and do the same for any images and stylesheets. Now comes the really tricky part.&lt;/p&gt;

&lt;p&gt;The template files are plain HTML, but Middleman uses ERB to construct the pages. You can use Slim or HAML or whatever you like, but I stuck with ERB for this project. You&amp;rsquo;re going to have to migrate the HTML over into the ERB files manually.&lt;/p&gt;

&lt;p&gt;Each page is wrapped using &lt;code&gt;layout.erb&lt;/code&gt;. You&amp;rsquo;ll want to move the parts of the template that apply to every page (like the like HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section, navigation, and footer) into the &lt;code&gt;layout.erb&lt;/code&gt; file. Move the landing page-specific content into &lt;code&gt;index.html.erb&lt;/code&gt;. This involves a lot of trial-and-error, just keep at it until it looks right. If you get stuck with a weird error, Google it and I&amp;rsquo;m sure you&amp;rsquo;ll find someone else with the same problem (and you can benefit from their solution).&lt;/p&gt;

&lt;p&gt;Writing your content and getting it to display correctly is beyond the scope of this blog post, and it&amp;rsquo;s going to depend a lot on what your site is about. Remember to make frequent, small changes, and that deploys are automated when you push to GitHub.&lt;/p&gt;

&lt;p&gt;The Peer Lab site has a list of peer labs around the world, and this list is generated from a &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/data/events.yml"&gt;yaml file&lt;/a&gt;. If you want to do something similar, create a new &lt;code&gt;data&lt;/code&gt; directory in the root of your repo and, within it, create a new &lt;code&gt;.yml&lt;/code&gt; file. You&amp;rsquo;ll be able to access the contents of this file &lt;em&gt;as&lt;/em&gt; Ruby objects. There&amp;rsquo;s more info &lt;a href="https://middlemanapp.com/advanced/data_files/#toc"&gt;in the Middleman docs&lt;/a&gt;, and you can check out my implementation &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/source/find.html.erb#L20-L56"&gt;here&lt;/a&gt;. I also added &lt;a href="https://github.com/ashfurrow/peerlab.community#adding-your-peer-lab"&gt;documentation&lt;/a&gt; about the format of the yaml file to my Readme, you should consider doing it too.&lt;/p&gt;

&lt;p&gt;Okay, almost done! The final thing we need to do is think about SEO. Yes, SEO. When someone shares your site on Facebook or Twitter, or sends it as an iMessage, you want it to expand and have a summary card instead of just being an ordinary URL. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/building-static-sites-with-middleman/imessage.png" alt="iMessage expansion" /&gt;&lt;/p&gt;

&lt;p&gt;There are three groups of &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags to add to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;: ordinary tags, Twitter Card tags, and Facebook Open Graph tags. The content of these tags is going to depend on your individual site, but for reference here&amp;rsquo;s the &lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Cards documentation&lt;/a&gt;, the &lt;a href="https://developers.facebook.com/docs/sharing/opengraph"&gt;Facebook Open Graph documentation&lt;/a&gt;, and &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/source/layouts/layout.erb#L8-L34"&gt;my implementation&lt;/a&gt; for the Peer Lab site. Use the &lt;a href="https://developers.facebook.com/tools/debug/"&gt;Open Graph Debugger&lt;/a&gt; to preview what your site looks like when people share it. Nice.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So that&amp;rsquo;s a rundown on how to quickly create a static website using Middleman. I&amp;rsquo;ve done this a few times and every time I do, I need to remember all the steps. Now, at the very least, I&amp;rsquo;ve got documentation ðŸ˜…&lt;/p&gt;

&lt;p&gt;The peer lab site is &lt;a href="https://github.com/ashfurrow/peerlab.community"&gt;open source&lt;/a&gt;, as is &lt;a href="https://github.com/ashfurrow/blog"&gt;this blog&lt;/a&gt;, and both are built with Middleman. My blog is significantly more complicated, though. I&amp;rsquo;m happy to answer questions about either, just open a GitHub issue and I&amp;rsquo;ll answer there. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I&amp;rsquo;ve since given a lunch &amp;amp; learn at work on this topic, you can check it out here:&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/yoGielteT64' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;


</description>
      <pubDate>Mon, 09 Jan 2017 19:58:57 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/building-static-sites-with-middleman/</guid>
    </item>
    <item>
      <title>Craft and Tooling</title>
      <link>https://ashfurrow.com/blog/craft-and-tooling/</link>
      <description>&lt;p&gt;You may have heard the idiom &amp;ldquo;it&amp;rsquo;s a poor craftsperson who blames their tools&amp;rdquo;, which offers advice that seems to make sense on the surface: focus on skill, and not on tools. But there&amp;rsquo;s a danger in taking that advice too far and &lt;em&gt;ignoring&lt;/em&gt; tools completely, and I don&amp;rsquo;t know of any craftspeople who would recommend that.&lt;/p&gt;

&lt;p&gt;Hi, I&amp;rsquo;m the Internet&amp;rsquo;s Ash Furrow and today we&amp;rsquo;re going to talk about a problematic tweet I saw today.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;When you overhear people complaining that their tools are the root cause of failure send them this video of Kelly Slater on a table. &lt;a href="https://t.co/0Mw1CByeUy"&gt;pic.twitter.com/0Mw1CByeUy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jesse Hanley (@jessethanley) &lt;a href="https://twitter.com/jessethanley/status/813904788702183425"&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Okay so first off I just need to say &lt;em&gt;that looks awesome&lt;/em&gt;. That surfer is kicking ass at making upturned-furniture surfing look cool and fun. But just like our idiom earlier, there&amp;rsquo;s a danger in taking away the wrong message: that tools don&amp;rsquo;t matter at all. Tools definitely matter.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s talk about tooling! It&amp;rsquo;s really important to understand that different people work better or worse with different tools. Let&amp;rsquo;s look at guitars as an example. People with smaller bodies sometimes use 3/4â€“ or 1/2â€“size guitars, beginners sometimes start on classical guitars with nylon strings that are easier to learn to plan on, and different types of guitars lend themselves to different styles of music. My point is: the guitar itself matters.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re first learning a craft, the tool you use is going to heavily affect your ability to function and learn. Returning to the guitar metaphor, if a guitar is ill-suited for an individual, then they&amp;rsquo;re going to have a hard time staying motivated to keep learning the guitar. This is in contrast to an expert guitarist, who already has the skills to make an ill-suited guitar sound great.&lt;/p&gt;

&lt;p&gt;So not only do tools matter, but they matter &lt;em&gt;more&lt;/em&gt; for beginners than experts.&lt;/p&gt;

&lt;p&gt;This might seem counter-intuitive, but it makes more sense when you consider that experts are more experienced at picking the &lt;em&gt;right&lt;/em&gt; tool for a job.&lt;/p&gt;

&lt;p&gt;When we focus on skills to the exclusion of tools, we risk falling victim to &lt;a href="https://en.wikipedia.org/wiki/Survivorship_bias"&gt;survivorship bias&lt;/a&gt;. In any field, experts (who have already &amp;ldquo;survived&amp;rdquo; the learning process of their craft) are especially prone to falling for this logical fallacy; tools don&amp;rsquo;t matter as much to them anymore.&lt;/p&gt;

&lt;p&gt;As developers, we need tools that support experts, and beginners, and everyone in between. And we need to recognize that while skills matter, tools play a really important role in how we acquire those skills.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;a) âœ¨ survivorship bias âœ¨&lt;br&gt;b) man surfboards donâ€™t have technical debt, own up and maintain your stuff&lt;a href="https://t.co/kKYUrgz6er"&gt;https://t.co/kKYUrgz6er&lt;/a&gt;&lt;/p&gt;&amp;mdash; Melissa ðŸ•¯ (@0xabad1dea) &lt;a href="https://twitter.com/0xabad1dea/status/814858687642763268"&gt;December 30, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So enjoy a hearty laugh at that fellow who can surf on an upturned coffee table â€“ it&amp;rsquo;s pretty cool! But keep in mind that it took skill to do so â€“ skills acquired with better tools. The longer you&amp;rsquo;ve been working in a field, the less tools will matter to you. Just be aware of your bias when your talking to beginners and you&amp;rsquo;ll do great!&lt;/p&gt;
</description>
      <pubDate>Sat, 31 Dec 2016 02:34:38 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/craft-and-tooling/</guid>
    </item>
  </channel>
</rss>
