<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>Naming Things in Swift</title>
      <link>https://ashfurrow.com/blog/naming-things-in-swift/</link>
      <description>&lt;p&gt;Lately, I&amp;rsquo;ve been using different programming languages and environments, trying to diversify my skills. I&amp;rsquo;ve been working regularly in React, Swift, Objective-C, and Scala, and they all have their own idioms and conventions. It&amp;rsquo;s been a real learning experience, getting to compare and contrast the languages, and to use what I learn to become a better Swift developer, too.&lt;/p&gt;

&lt;p&gt;My manager, who has been helping me learn Scala, sent me this awesome &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html"&gt;blog post about naming things&lt;/a&gt; and it blew me away with its comprehensive description of when to use different levels of verbosity in Scala. So my goal today is to provide a similarly awesome blog post about when to be concise and when to be verbose, in Swift. I&amp;rsquo;m going to be borrowing some examples and points from this Scala post, relating things back to Swift and iOS apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Whether or not you prefer conciseness when programming, Swift has language features that allow you to write your code at your preferred level of verbosity. Beyond naming, features like trailing closure syntax, unnamed parameters, positional closure arguments allow programmers to be verbose in some circumstances and succinct in others.&lt;/p&gt;

&lt;p&gt;The question isn&amp;rsquo;t &lt;em&gt;if&lt;/em&gt; you should be concise (or not). The question is: &lt;em&gt;where&lt;/em&gt; you should be concise (or verbose).&lt;/p&gt;

&lt;p&gt;Swift has been around long enough that it&amp;rsquo;s started to develop idioms that code should generally adhere to. The creators of Swift have been kind enough to release &lt;a href="https://swift.org/documentation/api-design-guidelines/"&gt;official API design guidelines&lt;/a&gt; which are an excellent read. These are great, but I want more: I want to talk about how to develop an &lt;em&gt;intuition&lt;/em&gt; about idiomatic Swift. We&amp;rsquo;re going to cover intutively naming things in detail, then move onto a discussion of language features.&lt;/p&gt;

&lt;h2 id="philosophy"&gt;Philosophy&lt;/h2&gt;

&lt;p&gt;The principles of the Swift API design that specifically touch on naming things are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clarity at the point of use is your most important goal.&lt;/li&gt;
&lt;li&gt;Clarity is more important than brevity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fantastic guidelines, but let&amp;rsquo;s go further. Haoyi&amp;rsquo;s Scala blog post tells us that our goal when naming something is to:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Show programmers something they don&amp;rsquo;t already know, but want to know.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;This is an interesting guideline because it requires us to think about the context of our code, and who will be working with it in the future. Remember: code is written only once, but is read over and over, so programmers should optimize for &lt;em&gt;ease of reading&lt;/em&gt; and not ease of writing. And, the most important thing to consider when optimize for reading is &lt;em&gt;context&lt;/em&gt;. The Scala blog post &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html#Philosophy"&gt;lays this out well&lt;/a&gt;, and says that context includes both things the programmer already knows, and things they want to know:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Programmers already know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things they&amp;rsquo;ve seen before in your codebase&lt;/li&gt;
&lt;li&gt;Things they&amp;rsquo;ve seen before in other codebases&lt;/li&gt;
&lt;li&gt;Facts they&amp;rsquo;ve picked up in previous jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programmers want to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things that affect what they&amp;rsquo;re doing&lt;/li&gt;
&lt;li&gt;Things which they need to understand&lt;/li&gt;
&lt;li&gt;Things they are unfamiliar with&lt;/li&gt;
&lt;li&gt;Things that are especially dangerous, whether due to correctness, security, performance, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not comprehensive.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Think about who will be reading your code, and when. Is it a colleague, who will use the code every day? Or maybe yourself six months from now? Are you trying to encourage more casual contributions to your open source project? These different situations may affect how you name some function. Let&amp;rsquo;s examine.&lt;/p&gt;

&lt;p&gt;A colleague using your code every day is likely to be thoroughly familiar with your codebase and its conventions, so pithy code might be best. If you don&amp;rsquo;t plan on working on the codebase for six months, you&amp;rsquo;ll likely return to it unfamiliar with its conventions, so being wordy might be most helpful. Casual contributors to open source projects probably won&amp;rsquo;t understand how large codebases fit together, so being overly verbose could help improve the number of contributions to your project.&lt;/p&gt;

&lt;p&gt;Think about who is likely to read your code, and what their goals are. &lt;/p&gt;

&lt;h2 id="guidelines"&gt;Guidelines&lt;/h2&gt;

&lt;p&gt;These are guidelines, not axioms. Break the rules if your intuition tells you to. Let&amp;rsquo;s discuss guidelines for naming things in rough order of importance. And remember: always keep context in mind!&lt;/p&gt;

&lt;p&gt;(Please remember that I&amp;rsquo;m adapting these naming guidelines &lt;a href="http://www.lihaoyi.com/post/StrategicScalaStyleConcisenessNames.html#long-names-vs-short-names"&gt;from the original article&lt;/a&gt; for Swift â€“ we owe that post and its author, &lt;a href="https://github.com/lihaoyi"&gt;Li Haoyi&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id="wider-scoped-names-should-be-longer"&gt;Wider-Scoped Names Should Be Longer&lt;/h3&gt;

&lt;p&gt;Why is the name &lt;code&gt;i&lt;/code&gt; okay in this example?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But not in this one?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;MyStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider where &lt;code&gt;i&lt;/code&gt; is being referred from within the codebase. In the first example, &lt;code&gt;i&lt;/code&gt; is only accessed from within the &lt;code&gt;for&lt;/code&gt; loop. But in the second example, it is a member of a struct and is accessed by any code using that struct, possibly the entire codebase! At a glance, it&amp;rsquo;s impossible to find out the context of &lt;code&gt;i&lt;/code&gt; because it&amp;rsquo;s so widely used. &lt;/p&gt;

&lt;p&gt;Remember: we want to tell the programmer reading the code something they don&amp;rsquo;t know but want to know. Let&amp;rsquo;s fix the struct.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;MyStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;numberOfInteractions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn&amp;rsquo;t mean that all loop variables should be short, it only means that &lt;em&gt;widely&lt;/em&gt; used names should be longer. Let&amp;rsquo;s see a counterexample, where a short variable name in a loop can be a bad idea.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repeating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="nf"&gt;writeToDb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformedData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Tricky C API...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we can all agree that &lt;code&gt;i&lt;/code&gt; would benefit from a longer name. Why? Because its scope of use is wider, and it&amp;rsquo;s used more. That brings us to our next guideline.&lt;/p&gt;

&lt;h3 id="more-used-names-should-be-shorter"&gt;More-Used Names Should be Shorter&lt;/h3&gt;

&lt;p&gt;Consider &lt;code&gt;print&lt;/code&gt;, probably the first function you learned in Swift. As a function name, &amp;ldquo;print&amp;rdquo; works perfectly well:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi there!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So why doesn&amp;rsquo;t &amp;ldquo;cache&amp;rdquo; work well here?&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;AppDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIResponder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;downloader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Only called at app startup.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; is used a lot and any Swift developer could be expected to be familiar with it. &lt;code&gt;cache&lt;/code&gt; is only used once and is defined in a custom object that probably doesn&amp;rsquo;t get looked at all too often. It could benefit from a longer name.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;initializeCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much nicer.&lt;/p&gt;

&lt;h3 id="dangerous-names-should-be-longer"&gt;Dangerous Names Should be Longer&lt;/h3&gt;

&lt;p&gt;Some functions should be long because of what they &lt;em&gt;do&lt;/em&gt;. Dangerous functions should be long, while boring ones should be shorter. This is a function that&amp;rsquo;s &lt;em&gt;too&lt;/em&gt; long.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadDataFieldsFromOfflineCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could be something like this instead: &lt;code&gt;loadFromCache&lt;/code&gt;. &lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;loadFromCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But consider this function, which really benefits from being quite long:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;deleteAPICredentialsFromCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function has a long name because it&amp;rsquo;s dangerous to call it: we always want to avoid deleting user data by accident. For that reason you wouldn&amp;rsquo;t want to call it something really succinct, like:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;delToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* deletes user data omg! */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember: we want to tell the developer reading the name something they don&amp;rsquo;t know but that they &lt;em&gt;do&lt;/em&gt; want to know. I imagine whoever calling this function definitely wants to know if it deletes user data!&lt;/p&gt;

&lt;h3 id="names-with-source-context-should-be-shorter"&gt;Names with Source-Context Should be Shorter&lt;/h3&gt;

&lt;p&gt;Types with names that exist inside types should be shorter, and ones that exist outside types should be longer. Consider the following:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s probably too short, since we don&amp;rsquo;t know what the &lt;code&gt;Delegate&lt;/code&gt; protocol is &lt;em&gt;for&lt;/em&gt;. Let&amp;rsquo;s improve it by giving it a longer name:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;DownloaderDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! Now the name helps us know what the protocol is for. &lt;/p&gt;

&lt;p&gt;If the Swift compiler supported protocols within types, an alternative improvement would be:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would extend its &lt;em&gt;fully qualified&lt;/em&gt; name to be &lt;code&gt;Downloader.Delegate&lt;/code&gt;. But alas, Swift doesn&amp;rsquo;t yet support this kind of protocol nesting.&lt;/p&gt;

&lt;p&gt;Just make sure to avoid duplicating type information within names:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;DownloaderDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Developers already know that types inside the &lt;code&gt;Downloader&lt;/code&gt; class have to do with that class, so repeating that information is superfluous. This brings us to our final guideline:&lt;/p&gt;

&lt;h3 id="strongly-typed-names-should-be-shorter"&gt;Strongly Typed Names Should be Shorter&lt;/h3&gt;

&lt;p&gt;Swift has a powerful, expressive type system and we can use that to make our names shorter. For example, consider the following property:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Downloader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;downloaderDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Delegate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We already know that the delegate property belongs to the &lt;code&gt;Downloader&lt;/code&gt; class, so giving it &lt;code&gt;downloaderDelegate&lt;/code&gt; as a property name is excessive. &lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another counterexample:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;zipTwoSequences&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead, the standard library contains only:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sequence2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Sequence2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because it&amp;rsquo;s obvious from the type signature that the arguments are sequences.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for naming guidelines, let&amp;rsquo;s talk about Swift features that let us be concise!&lt;/p&gt;

&lt;h2 id="omitting-names-entirely"&gt;Omitting Names Entirely&lt;/h2&gt;

&lt;p&gt;On the spectrum of verbose to succinct, at the very end of &amp;ldquo;succinct&amp;rdquo;, we have the option to just not name things &lt;em&gt;at all&lt;/em&gt;. You can do this with trailing closure syntax, with unnamed parameters, and with positional closure arguments. When to use them is a matter of following the guidelines outlined above.&lt;/p&gt;

&lt;p&gt;Trailing closure syntax is really handy, it helps make calling functions more concise. Borrowing from the Ray Wenderlich Swift Style Guide &lt;a href="https://github.com/raywenderlich/swift-style-guide#closure-expressions"&gt;section on closures&lt;/a&gt;: don&amp;rsquo;t use trailing closure syntax if the &lt;em&gt;purpose&lt;/em&gt; of the closure is ambiguous. For example, this would be bad:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would definitely be more clear:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For unnamed parameters, I&amp;rsquo;ll refer you to the official Swift API Guidelines &lt;a href="https://swift.org/documentation/api-design-guidelines/#argument-labels"&gt;on argument labels&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Omit all labels when arguments cannot be usefully distinguished (ex: &lt;code&gt;union(set1, set2)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Omit labels when its clear from the grammar of the function name what the first argument is (ex: &lt;code&gt;addSubview(y)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Omit labels for type conversion (ex: &lt;code&gt;Int64(someUInt32)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Otherwise (generally) include argument labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, that brings us to positional closure arguments. When to use these depends mostly on the length of your closure, and closely matches the &amp;ldquo;Wider-Scoped Names Should Be Longer&amp;rdquo; rule. &lt;/p&gt;

&lt;p&gt;If your closure does only a few things, use positional closure arguments:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a counterexample of being overly verbose:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is what things would look like if you don&amp;rsquo;t adhere to the first two guidelines about naming things.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repeating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fromData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, refer to the Ray Wenderlich guide for more info on closures.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Remember, the guidelines we&amp;rsquo;ve discussed today are not absolutes. Experiment, ask others, and learn. Have fun!&lt;/p&gt;
</description>
      <pubDate>Sat, 14 Jan 2017 21:15:11 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/naming-things-in-swift/</guid>
    </item>
    <item>
      <title>Building Static Sites with Middleman</title>
      <link>https://ashfurrow.com/blog/building-static-sites-with-middleman/</link>
      <description>&lt;p&gt;I recently launched this &lt;a href="http://peerlab.community"&gt;Peer Lab website&lt;/a&gt; to list the peer labs around the world and to provide instructions on starting one. It&amp;rsquo;s a small site with no need for a backend, so I decided to host it as static HTML. However, it was important that adding new labs would be easy for outside contributors. Since I had used the tool before to build a few static websites â€“ including this blog â€“ I turned to &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s explore the exact process I went through. I&amp;rsquo;m going to provide a series of high-level steps and link to actual code when I can, so you can replicate this for whatever site you need to build. However, every website is different, so &amp;ldquo;some assembly required&amp;rdquo; ðŸ˜‰&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The first thing you&amp;rsquo;ve got to do is create a new GitHub repository. We&amp;rsquo;ll use the repo to store the source code and also to host the site (each on their own branch, but more on that later). Install Middleman with &lt;code&gt;gem install middleman&lt;/code&gt;, and then run &lt;code&gt;middleman init&lt;/code&gt; to create the empty scaffold of your site. You can now run &lt;code&gt;middleman&lt;/code&gt; to start a server and browse the site locally. Nice! Time to commit your changes and push.&lt;/p&gt;

&lt;p&gt;Okay, so we&amp;rsquo;re running locally. Now we need to be able to deploy. I added the &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem to my Gemfile and ran &lt;code&gt;bundle install&lt;/code&gt;, and followed &lt;a href="https://github.com/edgecase/middleman-gh-pages#installation"&gt;their instructions&lt;/a&gt; to create a new Rake task. Now deploying to GitHub Pages is as easy as typing &lt;code&gt;rake publish&lt;/code&gt;. Try it out to make sure it works: it will build the site using Middleman and push a copy of the static HTML to the &lt;code&gt;gh-pages&lt;/code&gt; branch of your repo. Nice! Commit your changes and push them.&lt;/p&gt;

&lt;p&gt;Optionally, follow the &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;GitHub Pages documentation&lt;/a&gt; on using a custom domain name. Put the &lt;code&gt;CNAME&lt;/code&gt; file in the &lt;code&gt;source&lt;/code&gt; directory of your site&amp;rsquo;s repo.&lt;/p&gt;

&lt;p&gt;Now that we have deploys working, it&amp;rsquo;s time to automate them. Set up a new CI project on Travis or Circle CI (I used Travis, but they&amp;rsquo;re both awesome choices). CI is going to need to be able to push to your GitHub repo, so you&amp;rsquo;ll need a GitHub personal access token with the necessary permissions, stored in a CI secure environment variable. Once you&amp;rsquo;ve done that, we need to tell &lt;code&gt;git&lt;/code&gt; to use the token when pushing to GitHub. In your CI setup, add something like the following:&lt;/p&gt;


&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;before_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo -e "machine github.com\n  login ci-user\n  password $GITHUB_API_KEY" &amp;gt;&amp;gt; ~/.netrc&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;chmod 600 ~/.netrc&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git config --global user.email "ash@ashfurrow.com"&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git config --global user.name "Ash Furrow (via Travis)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Storing the access token in &lt;code&gt;.netrc&lt;/code&gt; provides the login info for when &lt;code&gt;git&lt;/code&gt; tries to push to GitHub, via the &lt;code&gt;middleman-gh-pages&lt;/code&gt; gem. Nice. &lt;/p&gt;

&lt;p&gt;Your CI needs some sort of script to test that the site generated successfully. I use &lt;code&gt;bundle exec middleman build --build-dir=test&lt;/code&gt; to generate the site in a &lt;code&gt;test&lt;/code&gt; directory. I want the testing and the deploying to be separate, but this means that we&amp;rsquo;re actually building the site twice. It&amp;rsquo;s a performance hit, but not a huge deal unless your site is huge.&lt;/p&gt;

&lt;p&gt;Ok, so in your CI config, after a successful build, we&amp;rsquo;ll want to add the following line: &lt;code&gt;bundle exec rake travis ALLOW_DIRTY=true&lt;/code&gt;. This executes the &lt;code&gt;travis&lt;/code&gt; Rake task with &lt;code&gt;ALLOW_DIRTY&lt;/code&gt;, needed for the GitHub Pages deploy gem. Let&amp;rsquo;s create that Rake task to &lt;em&gt;only&lt;/em&gt; deploy on pushes to master. Here&amp;rsquo;s what it looks like for Travis:&lt;/p&gt;


&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:travis&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TRAVIS_BRANCH'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;pull_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TRAVIS_PULL_REQUEST'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s1"&gt;'Must be run on Travis'&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pull_request&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Skipping deploy for pull request; can only be deployed from master branch.'&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Skipping deploy for &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; can only be deployed from master branch."&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'publish'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;invoke&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This script will look different for Circle, check out &lt;a href="https://circleci.com/docs/environment-variables/"&gt;their documentation&lt;/a&gt; for more details. Commit your changes and push them to GitHub. Watch your CI and â€“ if everything goes right â€“ your site should be deployed automatically, within minutes. Awesome!&lt;/p&gt;

&lt;p&gt;Now that the deploy process is automated, we can really quickly iterate on the site&amp;rsquo;s content and design. Oh hey, design, that&amp;rsquo;s a great idea! Time to replace the Middleman scaffold. &lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://startbootstrap.com"&gt;Start Bootstrap&lt;/a&gt; and grab one of their templates. After you&amp;rsquo;ve picked one, give it attribution in your site&amp;rsquo;s Readme. Importing the template itself is kind of tricky, as it&amp;rsquo;s different for each template. You&amp;rsquo;ll want to start by moving the templates&amp;rsquo; JavaScript files into the &lt;code&gt;source/javascripts&lt;/code&gt; directory of your Middleman site, and do the same for any images and stylesheets. Now comes the really tricky part.&lt;/p&gt;

&lt;p&gt;The template files are plain HTML, but Middleman uses ERB to construct the pages. You can use Slim or HAML or whatever you like, but I stuck with ERB for this project. You&amp;rsquo;re going to have to migrate the HTML over into the ERB files manually.&lt;/p&gt;

&lt;p&gt;Each page is wrapped using &lt;code&gt;layout.erb&lt;/code&gt;. You&amp;rsquo;ll want to move the parts of the template that apply to every page (like the like HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section, navigation, and footer) into the &lt;code&gt;layout.erb&lt;/code&gt; file. Move the landing page-specific content into &lt;code&gt;index.html.erb&lt;/code&gt;. This involves a lot of trial-and-error, just keep at it until it looks right. If you get stuck with a weird error, Google it and I&amp;rsquo;m sure you&amp;rsquo;ll find someone else with the same problem (and you can benefit from their solution).&lt;/p&gt;

&lt;p&gt;Writing your content and getting it to display correctly is beyond the scope of this blog post, and it&amp;rsquo;s going to depend a lot on what your site is about. Remember to make frequent, small changes, and that deploys are automated when you push to GitHub.&lt;/p&gt;

&lt;p&gt;The Peer Lab site has a list of peer labs around the world, and this list is generated from a &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/data/events.yml"&gt;yaml file&lt;/a&gt;. If you want to do something similar, create a new &lt;code&gt;data&lt;/code&gt; directory in the root of your repo and, within it, create a new &lt;code&gt;.yml&lt;/code&gt; file. You&amp;rsquo;ll be able to access the contents of this file &lt;em&gt;as&lt;/em&gt; Ruby objects. There&amp;rsquo;s more info &lt;a href="https://middlemanapp.com/advanced/data_files/#toc"&gt;in the Middleman docs&lt;/a&gt;, and you can check out my implementation &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/source/find.html.erb#L20-L56"&gt;here&lt;/a&gt;. I also added &lt;a href="https://github.com/ashfurrow/peerlab.community#adding-your-peer-lab"&gt;documentation&lt;/a&gt; about the format of the yaml file to my Readme, you should consider doing it too.&lt;/p&gt;

&lt;p&gt;Okay, almost done! The final thing we need to do is think about SEO. Yes, SEO. When someone shares your site on Facebook or Twitter, or sends it as an iMessage, you want it to expand and have a summary card instead of just being an ordinary URL. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/building-static-sites-with-middleman/imessage.png" alt="iMessage expansion" /&gt;&lt;/p&gt;

&lt;p&gt;There are three groups of &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags to add to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;: ordinary tags, Twitter Card tags, and Facebook Open Graph tags. The content of these tags is going to depend on your individual site, but for reference here&amp;rsquo;s the &lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Cards documentation&lt;/a&gt;, the &lt;a href="https://developers.facebook.com/docs/sharing/opengraph"&gt;Facebook Open Graph documentation&lt;/a&gt;, and &lt;a href="https://github.com/ashfurrow/peerlab.community/blob/5792eebad29156ea56f60e7304fd29dba3dbe55a/source/layouts/layout.erb#L8-L34"&gt;my implementation&lt;/a&gt; for the Peer Lab site. Use the &lt;a href="https://developers.facebook.com/tools/debug/"&gt;Open Graph Debugger&lt;/a&gt; to preview what your site looks like when people share it. Nice.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So that&amp;rsquo;s a rundown on how to quickly create a static website using Middleman. I&amp;rsquo;ve done this a few times and every time I do, I need to remember all the steps. Now, at the very least, I&amp;rsquo;ve got documentation ðŸ˜…&lt;/p&gt;

&lt;p&gt;The peer lab site is &lt;a href="https://github.com/ashfurrow/peerlab.community"&gt;open source&lt;/a&gt;, as is &lt;a href="https://github.com/ashfurrow/blog"&gt;this blog&lt;/a&gt;, and both are built with Middleman. My blog is significantly more complicated, though. I&amp;rsquo;m happy to answer questions about either, just open a GitHub issue and I&amp;rsquo;ll answer there. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I&amp;rsquo;ve since given a lunch &amp;amp; learn at work on this topic, you can check it out here:&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/yoGielteT64' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;


</description>
      <pubDate>Mon, 09 Jan 2017 19:58:57 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/building-static-sites-with-middleman/</guid>
    </item>
    <item>
      <title>Craft and Tooling</title>
      <link>https://ashfurrow.com/blog/craft-and-tooling/</link>
      <description>&lt;p&gt;You may have heard the idiom &amp;ldquo;it&amp;rsquo;s a poor craftsperson who blames their tools&amp;rdquo;, which offers advice that seems to make sense on the surface: focus on skill, and not on tools. But there&amp;rsquo;s a danger in taking that advice too far and &lt;em&gt;ignoring&lt;/em&gt; tools completely, and I don&amp;rsquo;t know of any craftspeople who would recommend that.&lt;/p&gt;

&lt;p&gt;Hi, I&amp;rsquo;m the Internet&amp;rsquo;s Ash Furrow and today we&amp;rsquo;re going to talk about a problematic tweet I saw today.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;When you overhear people complaining that their tools are the root cause of failure send them this video of Kelly Slater on a table. &lt;a href="https://t.co/0Mw1CByeUy"&gt;pic.twitter.com/0Mw1CByeUy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jesse Hanley (@jessethanley) &lt;a href="https://twitter.com/jessethanley/status/813904788702183425"&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Okay so first off I just need to say &lt;em&gt;that looks awesome&lt;/em&gt;. That surfer is kicking ass at making upturned-furniture surfing look cool and fun. But just like our idiom earlier, there&amp;rsquo;s a danger in taking away the wrong message: that tools don&amp;rsquo;t matter at all. Tools definitely matter.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s talk about tooling! It&amp;rsquo;s really important to understand that different people work better or worse with different tools. Let&amp;rsquo;s look at guitars as an example. People with smaller bodies sometimes use 3/4â€“ or 1/2â€“size guitars, beginners sometimes start on classical guitars with nylon strings that are easier to learn to plan on, and different types of guitars lend themselves to different styles of music. My point is: the guitar itself matters.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re first learning a craft, the tool you use is going to heavily affect your ability to function and learn. Returning to the guitar metaphor, if a guitar is ill-suited for an individual, then they&amp;rsquo;re going to have a hard time staying motivated to keep learning the guitar. This is in contrast to an expert guitarist, who already has the skills to make an ill-suited guitar sound great.&lt;/p&gt;

&lt;p&gt;So not only do tools matter, but they matter &lt;em&gt;more&lt;/em&gt; for beginners than experts.&lt;/p&gt;

&lt;p&gt;This might seem counter-intuitive, but it makes more sense when you consider that experts are more experienced at picking the &lt;em&gt;right&lt;/em&gt; tool for a job.&lt;/p&gt;

&lt;p&gt;When we focus on skills to the exclusion of tools, we risk falling victim to &lt;a href="https://en.wikipedia.org/wiki/Survivorship_bias"&gt;survivorship bias&lt;/a&gt;. In any field, experts (who have already &amp;ldquo;survived&amp;rdquo; the learning process of their craft) are especially prone to falling for this logical fallacy; tools don&amp;rsquo;t matter as much to them anymore.&lt;/p&gt;

&lt;p&gt;As developers, we need tools that support experts, and beginners, and everyone in between. And we need to recognize that while skills matter, tools play a really important role in how we acquire those skills.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;a) âœ¨ survivorship bias âœ¨&lt;br&gt;b) man surfboards donâ€™t have technical debt, own up and maintain your stuff&lt;a href="https://t.co/kKYUrgz6er"&gt;https://t.co/kKYUrgz6er&lt;/a&gt;&lt;/p&gt;&amp;mdash; Melissa ðŸ•¯ (@0xabad1dea) &lt;a href="https://twitter.com/0xabad1dea/status/814858687642763268"&gt;December 30, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So enjoy a hearty laugh at that fellow who can surf on an upturned coffee table â€“ it&amp;rsquo;s pretty cool! But keep in mind that it took skill to do so â€“ skills acquired with better tools. The longer you&amp;rsquo;ve been working in a field, the less tools will matter to you. Just be aware of your bias when your talking to beginners and you&amp;rsquo;ll do great!&lt;/p&gt;
</description>
      <pubDate>Sat, 31 Dec 2016 02:34:38 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/craft-and-tooling/</guid>
    </item>
    <item>
      <title>Learning Guitar</title>
      <link>https://ashfurrow.com/blog/learning-guitar/</link>
      <description>&lt;p&gt;So the world kinda sucks, eh? There&amp;rsquo;s no shortage of things to be worried about, and if I&amp;rsquo;m not careful I can easily get sucked into a spiral of despair. Yikes. I can&amp;rsquo;t help anyone if I&amp;rsquo;m paralyzed by depression, so I needed something to help take my mind off things. Music seemed like a great choice.&lt;/p&gt;

&lt;p&gt;So about a month ago I bought a ukulele. Actually, my wife and I each got one so we could learn together. I&amp;rsquo;d tried to learn guitar a few years ago but had struggled due to a lack of direction, and the uke seemed like a good way to try again to learn my first stringed instrument. Well after getting &lt;em&gt;really&lt;/em&gt; into it I decided to by a guitar again.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The guitar is just as hard to learn as I remember, but the uke really helped me get used to contorting my fingers into unnatural shapes to play chords. So I&amp;rsquo;m really grateful I picked it up first. I got a &lt;a href="http://amzn.to/2i3vzGq"&gt;Cordoba 15CM&lt;/a&gt; ukulele from Guitar Center and went back for a &lt;a href="http://amzn.to/2hVWvfq"&gt;Yamaha FS800&lt;/a&gt;. I followed advice from friends to go to a store in person and find an instrument that felt nice in my hands, even if I didn&amp;rsquo;t know how to play it yet. I got an acoustic guitar because it&amp;rsquo;s most used in the music I listen to.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.instagram.com/p/nn7ASGjBng/"&gt;last time&lt;/a&gt; I tried to learn guitar I didn&amp;rsquo;t really have a plan, other than to just playing Rocksmith. Turns out playing a video game isn&amp;rsquo;t the best way to learn an instrument. So here&amp;rsquo;s what I&amp;rsquo;m doing now:&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href="http://yousician.com"&gt;Yousician&lt;/a&gt; to learn uke and guitar; their lessons and tips have been really helpful so far, and I like that their business model (monthly subscription) is based on users continuing to use the app, so they have an incentive to continue to supply educational content. I wouldn&amp;rsquo;t be as far along with either the guitar or uke without them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/andycrowley"&gt;Andy Guitar&lt;/a&gt; has a free YouTube-based guitar course that I&amp;rsquo;ve been following, as well as tutorials on individual songs. The tutorials and the course actually tie into each other, and there&amp;rsquo;s a bunch of other educational content on &lt;a href="https://www.andyguitar.co.uk"&gt;their site&lt;/a&gt;. Really great stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/ukuleleunderground"&gt;Ukulele Underground&lt;/a&gt; is a YouTube channel with really earnest, helpful tips and instructions. &lt;a href="https://www.youtube.com/user/TheUkuleleTeacher"&gt;The Ukulele Teacher&lt;/a&gt; is another channel that focuses on teaching individual songs (with lots from Steven Universe, too).&lt;/p&gt;

&lt;p&gt;I also bought a book from the guitar store with my uke, which covers a lot of basics like how to hold and strum the instrument.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ve been trying to do is to expose myself to a variety of opinions on how to play, and then to synthesize a technique that works for me. Different experts have different opinions on how best to learn, and trying them has helped me understand the principles of what I&amp;rsquo;m learning.&lt;/p&gt;

&lt;p&gt;The human body isn&amp;rsquo;t designed to play instruments, especially guitar. When I was a student playing alto saxophone, my mouth ached after playing for a while, because my face muscles weren&amp;rsquo;t designed enough to maintain an embouchure. My teeth left indents on the inside of my mouth that lasted for years after I stopped playing.&lt;/p&gt;

&lt;p&gt;Guitar is a bit different. My left hand&amp;rsquo;s finger tips have lost most of their sensation from calluses building up. I knew this would happen but I wasn&amp;rsquo;t really prepared for it. I&amp;rsquo;m a programmer, I type a lot, and typing feels different when half my fingers can&amp;rsquo;t feel the keys anymore. And I&amp;rsquo;ve had to be diligent about holding/strumming properly to not aggravate my carpal tunnel syndrome. But it&amp;rsquo;s been rewarding nonetheless.&lt;/p&gt;

&lt;p&gt;I turned to music as a way to cope with crappy world events, and it&amp;rsquo;s worked: I&amp;rsquo;m feeling less stressed and more able to focus. The next two weeks off are gonna be jam-tastic.&lt;/p&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/hIoiyoo9W0Q' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
</description>
      <pubDate>Sun, 18 Dec 2016 16:44:20 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/learning-guitar/</guid>
    </item>
    <item>
      <title>The Swift Alps &amp; ReSwift</title>
      <link>https://ashfurrow.com/blog/the-swift-alps-reswift/</link>
      <description>&lt;p&gt;I&amp;rsquo;ve wanted to expand my expertise outside of just mobile development for a while now, and a few months ago I got the opportunity to begin building a large new feature in an existing &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; app for the Artsy Auctions platform. I was &lt;em&gt;extra&lt;/em&gt; excited because the feature&amp;rsquo;s purpose is to make running auctions easier for my colleagues on the operations team, so every line of code I write makes their lives just a little easier. It&amp;rsquo;s been a very rewarding experience.&lt;/p&gt;

&lt;p&gt;The React app in question uses &lt;a href="http://redux.js.org"&gt;Redux&lt;/a&gt;, a state-management framework that I&amp;rsquo;ve grown quite fond of. The library itself is so small that it&amp;rsquo;s more accurately described as an &lt;em&gt;idea&lt;/em&gt; rather than a framework. And lo, Redux has an implementation in Swift called &lt;a href="https://github.com/ReSwift/ReSwift"&gt;ReSwift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;My friend Junior decided to run an experimental, workshop-based, collaborative learning conference called &lt;a href="http://theswiftalps.com"&gt;The Swift Alps&lt;/a&gt;. He asked me to be a mentor for the conference and I was honoured to oblige. I decided to use ReSwift in my workshops as a way to explore several other important aspects of iOS and Swift development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore alternative ways to manage application state in iOS apps.&lt;/li&gt;
&lt;li&gt;Imbue participants with a sense of community-driven software development.&lt;/li&gt;
&lt;li&gt;Normalize the GitHub model of fork/commit/pull request.&lt;/li&gt;
&lt;li&gt;Discover friction points involved in using non-UIKit inspired abstractions for managing state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;ldquo;UIKit is very opinionated and those opinions are often not very good&amp;rdquo; &lt;a href="https://twitter.com/ashfurrow"&gt;@ashfurrow&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/swiftalps?src=hash"&gt;#swiftalps&lt;/a&gt;&lt;/p&gt;&amp;mdash; Roy Marmelstein (@marmelroy) &lt;a href="https://twitter.com/marmelroy/status/797007786047639553"&gt;November 11, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Importantly, my goal was not to &lt;em&gt;convince&lt;/em&gt; people to use ReSwift or Redux style state management in Swift; instead, I only wanted to use ReSwift as a way to explore what was possible in terms of state management and demonstrate how software teams can work together to accomplish common goals. In that spirit, I reached out to ReSwift core maintainer &lt;a href="https://twitter.com/benjaminencz"&gt;Benjamin Encz&lt;/a&gt; to see what sorts of ideas they might have, or chores we could accomplish for them. I distilled their wishlist down to three main goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extend an &lt;a href="https://github.com/ReSwift/CounterExample"&gt;existing iOS example app&lt;/a&gt;, from displaying/manipulating one counter, to several.&lt;/li&gt;
&lt;li&gt;Add an iOS target to an &lt;a href="https://github.com/ReSwift/ReSwift-Todo-Example"&gt;existing macOS example app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build a brand new iOS application that used networking to explore asynchronous state changes in ReSwift.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It was ambitious. I had planned three two-hour sessions, each with a fresh batch of participants, each one building upon the work of the others (just like real software development). What the final products would look like, I didn&amp;rsquo;t know, but we were going to try, fail, and learn. Together.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want this to be like a typical workshop where I direct people to accomplish preset tasks. Instead, I wanted to model this off of the weekly &lt;a href="https://artsy.github.io/blog/2015/08/10/peer-lab/"&gt;peer lab&lt;/a&gt; that I help run on Saturday mornings. As a group, we broke down the goals into tasks that groups of two or three participants worked on. They reviewed each others&amp;rsquo; pull requests, coordinated, and handled merge conflicts. I was only there to facilitate.&lt;/p&gt;

&lt;p&gt;We accomplished the first goal and made some progress towards the second. Sadly, slow wifi and Xcode problems hampered transforming the macOS app into a macOS/iOS app. We didn&amp;rsquo;t end up building a new app. Despite these challenges, we learned a lot.&lt;/p&gt;

&lt;p&gt;Most of the work went into the first task: augmenting a simple counting application from being able to count one thing at a time to being able to count several things at once. This transition from one counter to many counters is commonly used in Redux web tutorials to graduate from simple to complex state; I wanted to repeat the process for ReSwift. By the end of the day, we had a full app that used ReSwift to full effect, including named counters, dynamic table view reloading based on LCS algorithms, Redux-style selectors, and state persistence.&lt;/p&gt;



&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/the-swift-alps-reswift/screenshot.png" alt="Screenshot of finished app" /&gt;&lt;/p&gt;



&lt;p&gt;We tried, failed, and tried again. When I ran out of ideas to augment the app, participants helped me out by coming up with their own goals and distributing work between groups. I was surprised and humbled by how quickly the participants â€“ mostly strangers â€“ were able to come together and form well-functioning teams.&lt;/p&gt;

&lt;p&gt;The counter app does a lot more than I had originally intended, and it&amp;rsquo;s now probably too complex to serve as a simple introduction to ReSwift. That&amp;rsquo;s okay, it can &lt;a href="https://github.com/TheSwiftAlps/CounterExample"&gt;sit alongside the original&lt;/a&gt; as a learning resource for others.&lt;/p&gt;

&lt;p&gt;I like Redux, and ReSwift is a great implementation of the idea. I&amp;rsquo;m undergoing a &lt;a href="https://github.com/artsy/eigen/pull/1985"&gt;switch to ReSwift in our auctions code&lt;/a&gt;. Redux appears to clash with UIKit in only the expected ways that a non-UIKit library would, and the simplicity of the framework helps to minimize dependencies within our large app.&lt;/p&gt;

&lt;p&gt;If I were to repeat this workshop, I would do a lot of the groundwork for creating a universal iOS/macOS app, since that became a large time sink. I feel bad that the time put into Xcode project configuration could have been spent exploring more interesting problems. However, the workshop format of having an &lt;em&gt;idea&lt;/em&gt; of the goal but not an exact destination or path in mind made the journey more educational, and more fun for everyone.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited to return to New York and the Auctions team, and bring with me a renewed appreciation for what Redux can accomplish. Travelling often leaves me tired, and I do feel a bit foggy now, but my spirit hasn&amp;rsquo;t been as high in quite a while. I&amp;rsquo;m looking forward to sharing this enthusiasm with the rest of my team.&lt;/p&gt;
</description>
      <pubDate>Sun, 13 Nov 2016 23:01:57 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/the-swift-alps-reswift/</guid>
    </item>
    <item>
      <title>Monet.app</title>
      <link>https://ashfurrow.com/blog/monet-app/</link>
      <description>&lt;p&gt;I heard about a cool &lt;a href="http://www.iflscience.com/plants-and-animals/website-helps-you-identify-birds-looking-your-photo/"&gt;website that can identify the species of bird from a photo&lt;/a&gt;. It&amp;rsquo;s an impressive feat of computer vision research, but it&amp;rsquo;s not an entirely automated process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Once users have taken a photo, they draw a box around the bird, click its bill, eye and tail and tell [the website] where and when the photo was taken.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;This idea of automating tasks &lt;em&gt;just enough&lt;/em&gt; to augment human capabilities has been on my mind since I met &lt;a href="https://twitter.com/joetastic"&gt;Joe Carrafa&lt;/a&gt;, the Engineering Manager of Applied Research at Warby Parker. A lot of applied research in our field is interested in AI/machine learning and automation.&lt;/p&gt;

&lt;p&gt;We discussed the fascinating idea of &lt;em&gt;semi-autonomous&lt;/em&gt; programs. Like &lt;em&gt;almost&lt;/em&gt; artificial intelligence. A little bit of human input and the computer fills in the rest. There are some things that humans are really good at but are intractable for computers. Humans can fill in the gap in the computers&amp;rsquo; capabilities, and then computers can automate the parts that are difficult for humans.&lt;/p&gt;

&lt;p&gt;A lot has already been said on the topic of automation, like this awesome video, but I want to talk about automation from an artistic perspective.&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/7Pq-S557XQU' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;Researchers have built &lt;a href="http://thenextweb.com/creativity/2015/08/31/machine-or-picasso-this-algorithm-can-transform-photos-into-fine-art/"&gt;algorithms that transform photos into Van Gogh paintings&lt;/a&gt;. Google has &lt;a href="http://www.theverge.com/2016/6/1/11829678/google-magenta-melody-art-generative-artificial-intelligence"&gt;created an AI that composes music&lt;/a&gt;. There are &lt;a href="https://github.com/alexjc/neural-doodle"&gt;open source projects that generate Monet paintings from MS-Paint&lt;/a&gt;. How cool is that!&lt;/p&gt;

&lt;p&gt;People worry about what you could call an &amp;ldquo;art of the gaps.&amp;rdquo; This is the scenario where human creativity is relegated to the shrinking gaps between what hasn&amp;rsquo;t yet been automated by technology. &lt;/p&gt;

&lt;p&gt;I share this worry, I think most technologists should, but like most technologists I can&amp;rsquo;t help but be excited, too. Because new technology doesn&amp;rsquo;t just automate things; new technology creates &lt;em&gt;new ways to be creative&lt;/em&gt;. Let me explain. &lt;/p&gt;

&lt;p&gt;Take photography for example. Right now, photography is one of the most widely practiced forms of art in history because of the ubiquity of camera phones. Some are concerned that the ease of taking pictures has come at the cost of creative freedom. They&amp;rsquo;re right, image processing algorithms have replaced darkrooms and have removed a lot of creative control from photography. &lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s not all bad! Photography has &lt;em&gt;exploded&lt;/em&gt; as an art form. And there are now &lt;em&gt;new types&lt;/em&gt; of photography, too. We now have Instagram stars and artists &lt;a href="http://petapixel.com/2016/01/23/this-artist-got-90k-instagram-followers-with-photos-of-a-fake-lavish-lifestyle/"&gt;parodying Instagram stars&lt;/a&gt; and cool discussions about &lt;a href="http://petapixel.com/2015/05/26/richard-prince-is-a-jerk/"&gt;&amp;ldquo;what is art?&amp;rdquo;&lt;/a&gt; and all kinds of new stuff!&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s &lt;em&gt;awesome&lt;/em&gt; that smartphones helped to proliferate photography as a casual form of art. I still enjoy a darkroom, but there are clear benefits to what smartphones have done for photography. It&amp;rsquo;s not just that photography is easier, it&amp;rsquo;s different now.&lt;/p&gt;

&lt;p&gt;Automation is going to keep supplementing human activity, including forms of labour and forms of art. In art&amp;rsquo;s case, I think the benefits far, far outweigh the costs.&lt;/p&gt;
</description>
      <pubDate>Sun, 30 Oct 2016 01:18:55 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/monet-app/</guid>
    </item>
  </channel>
</rss>
